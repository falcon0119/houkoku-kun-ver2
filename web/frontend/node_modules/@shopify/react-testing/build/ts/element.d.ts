import React from 'react';
import { Tag, Node, Predicate, FunctionKeys, DeepPartialArguments, PropsFor, UnknowablePropsFor, DebugOptions } from './types';
declare type Root = import('./root').Root<any>;
interface Tree<Props> {
    tag: Tag;
    type: string | React.ComponentType<any> | null;
    props: Props;
    instance?: any;
}
export declare class Element<Props> implements Node<Props> {
    private readonly tree;
    private readonly allChildren;
    readonly root: Root;
    get props(): Props;
    get type(): string | React.ComponentType<any> | null;
    get isDOM(): boolean;
    get instance(): any;
    get children(): Element<unknown>[];
    private get elementDescendants();
    private get elementChildren();
    get descendants(): Element<unknown>[];
    get domNodes(): HTMLElement[];
    get domNode(): HTMLElement | null;
    private descendantsCache;
    private elementChildrenCache;
    constructor(tree: Tree<Props>, allChildren: (Element<unknown> | string)[], root: Root);
    data(key: string): string | undefined;
    prop<K extends keyof Props>(key: K): Props[K];
    text(): string;
    html(): string;
    is<Type extends React.ComponentType<any> | string>(type: Type): this is Element<PropsFor<Type>>;
    find<Type extends React.ComponentType<any> | string>(type: Type, props?: Partial<PropsFor<Type>>): Element<PropsFor<Type>> | null;
    findAll<Type extends React.ComponentType<any> | string>(type: Type, props?: Partial<PropsFor<Type>>): Element<PropsFor<Type>>[];
    findWhere<Type extends React.ComponentType<any> | string | unknown = unknown>(predicate: Predicate): Element<UnknowablePropsFor<Type>> | null;
    findAllWhere<Type extends React.ComponentType<any> | string | unknown = unknown>(predicate: Predicate): Element<UnknowablePropsFor<Type>>[];
    trigger<K extends FunctionKeys<Props>>(prop: K, ...args: DeepPartialArguments<Props[K]>): ReturnType<NonNullable<Props[K] extends ((...args: any[]) => any) | undefined ? Props[K] : never>>;
    triggerKeypath<T = unknown>(keypath: string, ...args: unknown[]): T;
    debug(options?: DebugOptions): any;
    toString(): any;
}
export {};
//# sourceMappingURL=element.d.ts.map