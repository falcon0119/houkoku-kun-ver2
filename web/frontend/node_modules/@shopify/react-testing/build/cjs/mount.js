'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('./_virtual/_rollupPluginBabelHelpers.js');
var root = require('./root.js');

function mount(element) {
  return new root.Root(element);
}
class CustomRoot extends root.Root {
  constructor(tree, context, options) {
    super(tree, options);
    this.context = context;
  }

}
function createMount({
  render,
  context: createContext = defaultContext,
  afterMount = defaultAfterMount,
  cleanup
}) {
  function mount(element, options = {}) {
    const context = createContext(options);
    const wrapper = new CustomRoot(element, context, {
      render: element => render(element, context, options),
      resolveRoot: root => root.find(element.type)
    });

    if (cleanup) {
      const originalDestroy = wrapper.destroy.bind(wrapper);

      wrapper.destroy = () => {
        cleanup(wrapper, options);
        originalDestroy();
      };
    }

    const afterMountResult = afterMount(wrapper, options);
    return afterMountResult != null && 'then' in afterMountResult ? afterMountResult.then(() => wrapper) : wrapper;
  }

  Reflect.defineProperty(mount, 'extend', {
    writable: false,
    value: ({
      context: createAdditionalContext = defaultContext,
      render: additionalRender,
      afterMount: additionalAfterMount = defaultAfterMount
    }) => {
      return createMount({
        context: options => _rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2({}, createContext(options)), createAdditionalContext(options)),
        render: (element, context, options) => render(additionalRender(element, context, options), context, options),
        afterMount: (wrapper, options) => {
          const result = additionalAfterMount(wrapper, options);

          const finalResult = () => afterMount(wrapper, options);

          return result != null && 'then' in result ? result.then(finalResult) : finalResult();
        }
      });
    }
  });
  return mount;
}

function defaultContext() {
  return {};
}

function defaultAfterMount() {}

exports.Root = root.Root;
exports.CustomRoot = CustomRoot;
exports.createMount = createMount;
exports.mount = mount;
