import { matcherHint, RECEIVED_COLOR, EXPECTED_COLOR, printExpected } from 'jest-matcher-utils';
import { assertIsNode, printType, diffs } from './utilities.esnext';

function toProvideReactContext(node, Context, value) {
  assertIsNode(node, {
    expectation: 'toProvideReactContext',
    isNot: this.isNot
  });
  const foundByType = node.findAll(Context.Provider);
  const foundByValue = value == null ? foundByType : foundByType.filter(element => this.equals(value, element.prop('value')));
  const pass = foundByValue.length > 0;
  const message = pass ? () => `${matcherHint('.not.toProvideReactContext')}\n\n` + `Expected the React element:\n  ${RECEIVED_COLOR(node.toString())}\n` + `Not to contain context provider:\n  ${EXPECTED_COLOR(printType(Context.Provider))}\n${value ? `With value matching:\n  ${printExpected(value)}\n` : ''}` + `But ${foundByValue.length} matching ${printType(Context.Provider)}${foundByValue.length === 1 ? 's were' : ' was'} found.\n` : () => `${`${matcherHint('.toProvideReactContext')}\n\n` + `Expected the React element:\n  ${RECEIVED_COLOR(node.toString())}\n` + `To contain context provider:\n  ${EXPECTED_COLOR(printType(Context.Provider))}\n${value ? `With value matching:\n  ${printExpected(value)}\n` : ''}`}${foundByType.length === 0 ? `But no matching ${printType(Context.Provider)}s were found.\n` : `But the ${foundByType.length === 1 ? 'found provider has' : 'found provider have'} had different values:\n\n${diffs(foundByType, {
    value
  }, this.expand)}`}`;
  return {
    pass,
    message
  };
}

export { toProvideReactContext };
