import { matcherHint, RECEIVED_COLOR, printExpected, INVERTED_COLOR, printReceived } from 'jest-matcher-utils';
import { assertIsNode } from './utilities.esnext';

function toContainReactText(node, text) {
  assertIsNode(node, {
    expectation: 'toContainReactText',
    isNot: this.isNot
  });
  const nodeText = node.text();
  const matchIndex = nodeText.indexOf(text);
  const pass = matchIndex >= 0;
  const message = pass ? () => `${matcherHint('.not.toContainReactText', node.toString())}\n\n` + `Expected the React element:\n  ${RECEIVED_COLOR(node.toString())}\n` + `Not to contain text:\n  ${printExpected(text)}\n` + `But it did:\n  ${printReceivedWithHighlight(nodeText, matchIndex, text.length)}\n` : () => `${matcherHint('.not.toContainReactText', node.toString())}\n\n` + `Expected the React element:\n  ${RECEIVED_COLOR(node.toString())}\n` + `With text content:\n  ${printReceived(nodeText)}\n` + `To contain string:\n  ${printExpected(text)}\n`;
  return {
    pass,
    message
  };
}
function toContainReactHtml(node, text) {
  assertIsNode(node, {
    expectation: 'toContainReactHtml',
    isNot: this.isNot
  });
  const nodeHtml = node.html();
  const matchIndex = nodeHtml.indexOf(text);
  const pass = matchIndex >= 0;
  const message = pass ? () => `${matcherHint('.not.toContainReactHtml', node.toString())}\n\n` + `Expected the React element:\n  ${RECEIVED_COLOR(node.toString())}\n` + `Not to contain HTML:\n  ${printExpected(text)}\n` + `But it did:\n  ${printReceivedWithHighlight(nodeHtml, matchIndex, text.length)}\n` : () => `${matcherHint('.not.toContainReactHtml', node.toString())}\n\n` + `Expected the React element:\n  ${RECEIVED_COLOR(node.toString())}\n` + `With HTML content:\n  ${printReceived(nodeHtml)}\n` + `To contain HTML:\n  ${printExpected(text)}\n`;
  return {
    pass,
    message
  };
}

function printReceivedWithHighlight(text, start, length) {
  return RECEIVED_COLOR(`"${text.slice(0, start)}${INVERTED_COLOR(text.slice(start, start + length))}${text.slice(start + length)}"`);
}

export { toContainReactHtml, toContainReactText };
