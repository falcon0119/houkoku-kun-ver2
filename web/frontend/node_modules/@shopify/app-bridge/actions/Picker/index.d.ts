import { ClientApplication } from '../../client';
import { ActionSet } from '../ActionSet';
import { ActionSetProps, Group, MetaAction } from '../types';
export declare enum Action {
    OPEN = "APP::PICKER::OPEN",
    SELECT = "APP::PICKER::SELECT",
    UPDATE = "APP::PICKER::UPDATE",
    CANCEL = "APP::PICKER::CANCEL",
    SEARCH = "APP::PICKER::SEARCH",
    LOAD_MORE = "APP::PICKER::LOAD_MORE"
}
/**
 * @internal
 *
 * @unstable This API may be updated without warning in the future
 */
export interface Resource {
    /** in GraphQL id format, ie 'gid://shopify/Product/1' */
    id: string;
    name: string;
}
/**
 * @public
 *
 * @unstable This API may be updated without warning in the future
 */
export interface BaseResource extends Resource {
    options?: Resource[];
}
export interface CancelPayload {
    readonly id?: string;
}
/**
 * withIllustration is a polaris prop that toggles the illustration
 */
export interface EmptySearchLabel {
    title: string;
    withIllustration: boolean;
    description: string;
}
export interface Payload {
    readonly id?: string;
    items?: BaseResource[];
    selectedItems?: BaseResource[];
    maxSelectable?: number;
    title?: string;
    loading?: boolean;
    searchQueryPlaceholder?: string;
    searchQuery?: string;
    primaryActionLabel?: string;
    secondaryActionLabel?: string;
    emptySearchLabel?: EmptySearchLabel;
}
export interface SelectPayload {
    readonly id?: string;
    selectedItems: BaseResource[];
}
export interface SearchPayload {
    readonly id?: string;
    searchQuery: string;
}
export interface LoadMorePayload {
    readonly id?: string;
}
export interface Options {
    items: BaseResource[];
    selectedItems?: BaseResource[];
    maxSelectable?: number;
    title?: string;
    loading?: boolean;
    searchQueryPlaceholder?: string;
    searchQuery?: string;
    primaryActionLabel?: string;
    secondaryActionLabel?: string;
    emptySearchLabel?: EmptySearchLabel;
}
export interface ActionBase extends MetaAction {
    readonly group: typeof Group.unstable_Picker;
}
export interface SelectAction extends ActionBase {
    readonly type: typeof Action.SELECT;
    readonly payload: SelectPayload;
}
export interface UpdateAction extends ActionBase {
    readonly type: typeof Action.UPDATE;
    readonly payload: Payload;
}
export interface CancelAction extends ActionBase {
    readonly type: typeof Action.CANCEL;
}
export interface OpenAction extends ActionBase {
    readonly type: typeof Action.OPEN;
    readonly payload: Payload;
}
export interface SearchAction extends ActionBase {
    readonly type: typeof Action.SEARCH;
    readonly payload: SearchPayload;
}
export interface LoadMoreAction extends ActionBase {
    readonly type: typeof Action.LOAD_MORE;
}
export declare type PickerAction = SelectAction | UpdateAction | CancelAction | OpenAction | SearchAction | LoadMoreAction | MetaAction;
export declare function select(payload: SelectPayload): SelectAction;
export declare function open(payload: Payload): OpenAction;
export declare function cancel(payload: CancelPayload): CancelAction;
export declare function update(payload: Payload): UpdateAction;
export declare function search(payload: SearchPayload): SearchAction;
export declare function loadMore(payload: LoadMorePayload): LoadMoreAction;
/**
 * @unstable This API may be updated without warning in the future
 */
export declare class unstable_Picker extends ActionSet implements ActionSetProps<Options, Payload> {
    items: BaseResource[];
    maxSelectable?: number;
    selectedItems: BaseResource[];
    title?: string;
    loading?: boolean;
    searchQuery?: string;
    searchQueryPlaceholder?: string;
    primaryActionLabel?: string;
    secondaryActionLabel?: string;
    emptySearchLabel?: EmptySearchLabel;
    constructor(app: ClientApplication, options: Options);
    get payload(): {
        id: string;
        items: BaseResource[];
        selectedItems?: BaseResource[] | undefined;
        maxSelectable?: number | undefined;
        title?: string | undefined;
        loading?: boolean | undefined;
        searchQueryPlaceholder?: string | undefined;
        searchQuery?: string | undefined;
        primaryActionLabel?: string | undefined;
        secondaryActionLabel?: string | undefined;
        emptySearchLabel?: EmptySearchLabel | undefined;
    };
    get options(): Options;
    set(options: Partial<Options>, shouldUpdate?: boolean): this;
    dispatch(action: Action, payload?: Payload): this;
    protected update(): void;
    protected open(): void;
    protected cancel(): void;
    protected loadMore(): void;
}
export declare const create: (app: ClientApplication, options: Options) => unstable_Picker;
