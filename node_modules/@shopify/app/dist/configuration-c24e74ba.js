import { n as nodeExtensionsCLIPath } from './cli-925c35a7.js';
import { g as getUIExtensionRendererVersion } from './app-5df50971.js';
import { error, path } from '@shopify/cli-kit';

const RendererNotFoundBug = (extension) => {
  return new error.Bug(`Couldn't find renderer version for extension ${extension}`, "Make sure you have all your dependencies up to date");
};
async function extensionConfig(options) {
  const extensionsConfig = await Promise.all(options.extensions.map(async (extension) => {
    const renderer = await getUIExtensionRendererVersion(extension.configuration.type, options.app);
    if (renderer === "not_found")
      throw RendererNotFoundBug(extension.configuration.type);
    return {
      uuid: extension.devUUID,
      title: extension.configuration.name,
      type: `${extension.configuration.type}`,
      metafields: extension.configuration.metafields,
      extension_points: extension.configuration.extensionPoints || [],
      node_executable: await nodeExtensionsCLIPath(),
      surface: getUIExtensionSurface(extension.configuration.type),
      version: renderer?.version,
      development: {
        root_dir: path.relative(options.app.directory, extension.directory),
        build_dir: options.buildDirectory ? path.relative(extension.directory, options.buildDirectory) : path.relative(extension.directory, extension.buildDirectory),
        entries: {
          main: path.relative(extension.directory, extension.entrySourceFilePath)
        },
        renderer,
        resource: options.includeResourceURL ? await getUIExtensionResourceURL(extension.configuration.type, options) : null,
        build: {
          env: options.app.dotenv?.variables ?? {}
        },
        develop: {
          env: options.app.dotenv?.variables ?? {}
        }
      },
      capabilities: extension.configuration.capabilities
    };
  }));
  return {
    public_url: options.url,
    port: options.port,
    store: options.storeFqdn,
    app: {
      api_key: options.apiKey
    },
    extensions: extensionsConfig
  };
}
async function getUIExtensionResourceURL(uiExtensionType, options) {
  switch (uiExtensionType) {
    case "checkout_ui_extension":
      return { url: options.cartUrl };
    case "checkout_post_purchase":
    case "pos_ui_extension":
    case "web_pixel_extension":
      return { url: "invalid_url" };
    case "product_subscription":
      return { url: options.subscriptionProductUrl };
  }
}
function getUIExtensionSurface(uiExtensionType) {
  switch (uiExtensionType) {
    case "checkout_ui_extension":
      return "checkout";
    case "checkout_post_purchase":
      return "post_purchase";
    case "pos_ui_extension":
      return "pos";
    case "product_subscription":
      return "admin";
    case "web_pixel_extension":
      return "unknown";
  }
}

export { extensionConfig as e };
//# sourceMappingURL=configuration-c24e74ba.js.map
