import { r as runGoExtensionsCLI } from './cli-925c35a7.js';
import { e as extensionConfig } from './configuration-c24e74ba.js';
import { ruby, output, yaml, error, system } from '@shopify/cli-kit';

async function buildThemeExtensions(options) {
  if (options.extensions.length === 0)
    return;
  options.stdout.write(`Building theme extensions...`);
  const themeDirectories = options.extensions.map((extension) => extension.directory);
  await ruby.execThemeCheckCLI({
    directories: themeDirectories,
    args: ["-C", ":theme_app_extension"],
    stdout: options.stdout,
    stderr: options.stderr
  });
}
async function buildUIExtensions(options) {
  if (options.extensions.length === 0) {
    return;
  }
  options.stdout.write(`Building UI extensions...`);
  const fullOptions = { ...options, extensions: options.extensions, includeResourceURL: false };
  const configuration = await extensionConfig(fullOptions);
  output.debug(output.content`Dev'ing extension with configuration:
${output.token.json(configuration)}
`);
  const stdin = yaml.encode(configuration);
  await runGoExtensionsCLI(["build", "-"], {
    cwd: options.app.directory,
    stdout: options.stdout,
    stderr: options.stderr,
    stdin
  });
}
async function buildFunctionExtension(extension, options) {
  const buildCommand = extension.configuration.build?.command;
  if (!buildCommand || buildCommand.trim() === "") {
    options.stderr.write(`The function extension ${extension.localIdentifier} doesn't have a build command or it's empty`);
    options.stderr.write(`
    Edit the shopify.function.extension.toml configuration file and set how to build the extension.

    [build]
    command = "{COMMAND}"

    Note that the command must output a dist/index.wasm file.
    `);
    throw new error.AbortSilent();
  }
  const buildCommandComponents = buildCommand.split(" ");
  options.stdout.write(`Building function ${extension.localIdentifier}...`);
  await system.exec(buildCommandComponents[0], buildCommandComponents.slice(1), {
    stdout: options.stdout,
    stderr: options.stderr,
    cwd: extension.directory,
    signal: options.signal
  });
}

export { buildUIExtensions as a, buildThemeExtensions as b, buildFunctionExtension as c };
//# sourceMappingURL=extension-3fd19049.js.map
