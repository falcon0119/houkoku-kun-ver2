{"version":3,"file":"app-5df50971.js","sources":["../src/cli/flags.ts","../src/cli/constants.ts","../src/cli/models/app/app.ts"],"sourcesContent":["import {Flags} from '@oclif/core'\nimport {path} from '@shopify/cli-kit'\n\n/**\n * An object that contains the flags that\n * are shared across all the app commands.\n */\nexport const appFlags = {\n  path: Flags.string({\n    hidden: false,\n    description: 'The path to your app directory.',\n    parse: (input, _) => Promise.resolve(path.resolve(input)),\n    env: 'SHOPIFY_FLAG_PATH',\n  }),\n}\n","import {dependency} from '@shopify/cli-kit'\n\nexport const configurationFileNames = {\n  app: 'shopify.app.toml',\n  extension: {\n    ui: 'shopify.ui.extension.toml',\n    theme: 'shopify.theme.extension.toml',\n    function: 'shopify.function.extension.toml',\n  },\n  web: 'shopify.web.toml',\n} as const\n\nexport const dotEnvFileNames = {\n  production: '.env',\n}\n\nexport const environmentVariables = {\n  /**\n   * Environment variable to instructs the CLI on running the extensions' CLI through its sources.\n   */\n  useExtensionsCLISources: 'SHOPIFY_USE_EXTENSIONS_CLI_SOURCES',\n} as const\n\nexport const versions = {\n  extensionsBinary: 'v0.20.2',\n  react: '^17.0.0',\n} as const\n\nexport const blocks = {\n  extensions: {\n    directoryName: 'extensions',\n    configurationName: configurationFileNames.extension,\n  },\n  functions: {\n    defaultUrl: 'https://github.com/Shopify/function-examples',\n    defaultLanguage: 'wasm',\n    maxCompilationStatusCheckCount: 7,\n    compilationStatusWaitMs: 2000,\n  },\n  web: {\n    directoryName: 'web',\n    configurationName: configurationFileNames.web,\n  },\n} as const\n\n/**\n * List of extensions for each category that are limited by quantity, only 1 of each is allowed per app\n */\nexport const limitedExtensions: {\n  ui: UIExtensionTypes[]\n  theme: ThemeExtensionTypes[]\n  function: FunctionExtensionTypes[]\n} = {\n  ui: ['product_subscription', 'checkout_post_purchase', 'web_pixel_extension'],\n  theme: ['theme'],\n  function: [],\n}\n\nexport const publicFunctionExtensions = {\n  types: ['product_discounts', 'order_discounts', 'shipping_discounts'],\n} as const\nexport const functionExtensions = {\n  types: [...publicFunctionExtensions.types, 'payment_methods', 'shipping_rate_presenter'],\n} as const\n\nexport const functionExtensionTemplates = [\n  {name: 'Wasm', value: 'wasm'},\n  {name: 'Rust', value: 'rust'},\n]\n\nexport function isFunctionExtensionType(extensionType: string) {\n  return (functionExtensions.types as ReadonlyArray<string>).includes(extensionType)\n}\n\nexport const publicUIExtensions = {\n  types: ['product_subscription', 'checkout_ui_extension', 'checkout_post_purchase', 'web_pixel_extension'],\n} as const\n\nexport const uiExtensions = {\n  types: [...publicUIExtensions.types, 'pos_ui_extension'],\n} as const\n\nexport const activeUIExtensions = {\n  types: [...publicUIExtensions.types, 'pos_ui_extension'].filter,\n}\n\nexport type UIExtensionTypes = typeof uiExtensions.types[number]\n\nexport const uiExtensionTemplates = [\n  {name: 'React', value: 'react'},\n  {name: 'vanilla JavaScript', value: 'vanilla-js'},\n]\n\nexport function isUiExtensionType(extensionType: string) {\n  return (uiExtensions.types as ReadonlyArray<string>).includes(extensionType)\n}\n\nexport const themeExtensions = {\n  types: ['theme'],\n} as const\n\nexport type ThemeExtensionTypes = typeof themeExtensions.types[number]\n\nexport function isThemeExtensionType(extensionType: string) {\n  return (themeExtensions.types as ReadonlyArray<string>).includes(extensionType)\n}\n\nexport type FunctionExtensionTypes = typeof functionExtensions.types[number]\n\nexport const extensions = {\n  types: [...themeExtensions.types, ...uiExtensions.types, ...functionExtensions.types],\n  publicTypes: [...themeExtensions.types, ...publicUIExtensions.types, ...publicFunctionExtensions.types],\n}\n\nexport type ExtensionTypes = typeof extensions.types[number]\n\nexport function extensionTypeCategory(extensionType: ExtensionTypes): 'theme' | 'function' | 'ui' {\n  if (extensionType === 'theme') {\n    return 'theme'\n  }\n  if ((functionExtensions.types as ReadonlyArray<string>).includes(extensionType)) {\n    return 'function'\n  }\n  return 'ui'\n}\n\n/**\n * Given a extension type, it returns the extension point name that's necessary\n * when interacting when the API.\n * @param type {FunctionExtensionTypes} Function extension type.\n * @returns {string} Extension point name.\n */\nexport const getFunctionExtensionPointName = (type: FunctionExtensionTypes) => {\n  switch (type) {\n    case 'product_discounts':\n      return 'PRODUCT_DISCOUNTS'\n    case 'order_discounts':\n      return 'ORDER_DISCOUNTS'\n    case 'shipping_discounts':\n      return 'SHIPPING_DISCOUNTS'\n    case 'payment_methods':\n      return 'PAYMENT_METHODS'\n    case 'shipping_rate_presenter':\n      return 'SHIPPING_METHODS'\n  }\n}\n\n/**\n * Returns the runtime renderer dependency for a given UI extension type.\n * @param extensionType {UIExtensionTypes} Extension type.\n * @returns The renderer dependency that should be present in the app's package.json\n */\nexport function getUIExtensionRendererDependency(\n  extensionType: UIExtensionTypes,\n): dependency.DependencyVersion | undefined {\n  switch (extensionType) {\n    case 'product_subscription':\n      return {name: '@shopify/admin-ui-extensions-react', version: '^1.0.1'}\n    case 'checkout_ui_extension':\n      return {name: '@shopify/checkout-ui-extensions-react', version: '^0.17.0'}\n    case 'checkout_post_purchase':\n      return {name: '@shopify/post-purchase-ui-extensions-react', version: '^0.13.2'}\n    case 'pos_ui_extension':\n      return {name: '@shopify/retail-ui-extensions-react', version: '^0.1.0'}\n    case 'web_pixel_extension':\n      return {name: '@shopify/web-pixels-extension', version: '^0.1.1'}\n  }\n}\n\nexport const extensionTypesHumanKeys = {\n  types: [\n    'web pixel',\n    'post-purchase UI',\n    'theme app extension',\n    'checkout UI',\n    'POS UI',\n    'subscription UI',\n    'product discount',\n    'order discount',\n    'shipping discount',\n    'payment customization',\n    'delivery option presenter',\n  ],\n} as const\n\nexport type ExtensionTypesHumanKeys = typeof extensionTypesHumanKeys.types[number]\nexport interface ExtensionOutputConfig {\n  humanKey: ExtensionTypesHumanKeys\n  helpURL?: string\n  additionalHelp?: string\n}\n\nexport function getExtensionOutputConfig(extensionType: ExtensionTypes): ExtensionOutputConfig {\n  switch (extensionType) {\n    case 'web_pixel_extension':\n      return buildExtensionOutputConfig('web pixel')\n    case 'checkout_post_purchase':\n      return buildExtensionOutputConfig('post-purchase UI', 'https://shopify.dev/apps/checkout/post-purchase')\n    case 'theme':\n      return buildExtensionOutputConfig('theme app extension')\n    case 'checkout_ui_extension':\n      return buildExtensionOutputConfig('checkout UI')\n    case 'product_subscription':\n      return buildExtensionOutputConfig('subscription UI')\n    case 'pos_ui_extension':\n      return buildExtensionOutputConfig('POS UI')\n    case 'product_discounts':\n      return buildExtensionOutputConfig('product discount', 'https://shopify.dev/apps/subscriptions/discounts')\n    case 'order_discounts':\n      return buildExtensionOutputConfig('order discount', 'https://shopify.dev/apps/subscriptions/discounts')\n    case 'shipping_discounts':\n      return buildExtensionOutputConfig('shipping discount', 'https://shopify.dev/apps/subscriptions/discounts')\n    case 'payment_methods':\n      return buildExtensionOutputConfig('payment customization')\n    case 'shipping_rate_presenter':\n      return buildExtensionOutputConfig('delivery option presenter')\n  }\n}\n\nexport function getExtensionTypeFromHumanKey(humanKey: ExtensionTypesHumanKeys): ExtensionTypes {\n  switch (humanKey) {\n    case 'checkout UI':\n      return 'checkout_ui_extension'\n    case 'order discount':\n      return 'product_discounts'\n    case 'product discount':\n      return 'product_discounts'\n    case 'shipping discount':\n      return 'shipping_discounts'\n    case 'payment customization':\n      return 'payment_methods'\n    case 'post-purchase UI':\n      return 'checkout_post_purchase'\n    case 'subscription UI':\n      return 'product_subscription'\n    case 'POS UI':\n      return 'pos_ui_extension'\n    case 'delivery option presenter':\n      return 'shipping_rate_presenter'\n    case 'theme app extension':\n      return 'theme'\n    case 'web pixel':\n      return 'web_pixel_extension'\n  }\n}\n\nfunction buildExtensionOutputConfig(humanKey: ExtensionTypesHumanKeys, helpURL?: string, additionalHelp?: string) {\n  return {\n    humanKey,\n    helpURL,\n    additionalHelp,\n  }\n}\n","import {\n  blocks,\n  configurationFileNames,\n  functionExtensions,\n  themeExtensions,\n  uiExtensions,\n  getUIExtensionRendererDependency,\n  UIExtensionTypes,\n  dotEnvFileNames,\n  ExtensionTypes,\n} from '../../constants'\nimport {dependency, dotenv, error, file, id, path, schema, string, toml, output} from '@shopify/cli-kit'\n\nexport interface IdentifiersExtensions {\n  [localIdentifier: string]: string\n}\n\nexport interface Identifiers {\n  /** Application's API Key */\n  app: string\n\n  /**\n   * The extensions' unique identifiers.\n   */\n  extensions: IdentifiersExtensions\n\n  /**\n   * The extensions' numeric identifiers (expressed as a string).\n   */\n  extensionIds: IdentifiersExtensions\n}\n\nexport type UuidOnlyIdentifiers = Omit<Identifiers, 'extensionIds'>\n\nexport const AppConfigurationSchema = schema.define.object({\n  scopes: schema.define.string().default(''),\n})\n\nexport type AppConfiguration = schema.define.infer<typeof AppConfigurationSchema>\n\nconst UIExtensionConfigurationSchema = schema.define.object({\n  name: schema.define.string(),\n  type: schema.define.enum(uiExtensions.types),\n  metafields: schema.define\n    .array(\n      schema.define.object({\n        namespace: schema.define.string(),\n        key: schema.define.string(),\n      }),\n    )\n    .default([]),\n  extensionPoints: schema.define.array(schema.define.string()).optional(),\n  capabilities: schema.define.any().optional(),\n\n  // Only for WebPixel\n  runtimeContext: schema.define.string().optional(),\n  version: schema.define.string().optional(),\n  configuration: schema.define.any().optional(),\n})\n\ntype UIExtensionConfiguration = schema.define.infer<typeof UIExtensionConfigurationSchema>\n\nconst FunctionExtensionConfigurationSchema = schema.define.object({\n  name: schema.define.string(),\n  type: schema.define.enum(functionExtensions.types),\n  description: schema.define.string().default(''),\n  build: schema.define.object({\n    command: schema.define.string(),\n    path: schema.define.string().optional(),\n  }),\n  configurationUi: schema.define.boolean().optional().default(true),\n  ui: schema.define\n    .object({\n      paths: schema.define\n        .object({\n          create: schema.define.string(),\n          details: schema.define.string(),\n        })\n        .optional(),\n    })\n    .optional(),\n  apiVersion: schema.define.string(),\n})\n\ntype FunctionExtensionConfiguration = schema.define.infer<typeof FunctionExtensionConfigurationSchema>\n\nconst ThemeExtensionConfigurationSchema = schema.define.object({\n  name: schema.define.string(),\n  type: schema.define.enum(themeExtensions.types),\n})\n\ntype ThemeExtensionConfiguration = schema.define.infer<typeof ThemeExtensionConfigurationSchema>\n\nexport interface Extension {\n  idEnvironmentVariableName: string\n  localIdentifier: string\n  configurationPath: string\n  directory: string\n  type: ExtensionTypes\n  graphQLType: string\n}\n\nconst FunctionExtensionMetadataSchema = schema.define.object({\n  schemaVersions: schema.define.object({}).catchall(\n    schema.define.object({\n      major: schema.define.number(),\n      minor: schema.define.number(),\n    }),\n  ),\n})\n\ntype FunctionExtensionMetadata = schema.define.infer<typeof FunctionExtensionMetadataSchema>\n\nexport type FunctionExtension = Extension & {\n  configuration: FunctionExtensionConfiguration\n  metadata: FunctionExtensionMetadata\n  buildWasmPath: () => string\n  inputQueryPath: () => string\n}\n\nexport type ThemeExtension = Extension & {\n  configuration: ThemeExtensionConfiguration\n}\n\nexport type UIExtension = Extension & {\n  configuration: UIExtensionConfiguration\n  buildDirectory: string\n  entrySourceFilePath: string\n  devUUID: string\n}\n\nexport enum WebType {\n  Frontend = 'frontend',\n  Backend = 'backend',\n}\n\nexport const WebConfigurationSchema = schema.define.object({\n  type: schema.define.enum([WebType.Frontend, WebType.Backend]),\n  commands: schema.define.object({\n    build: schema.define.string().optional(),\n    dev: schema.define.string(),\n  }),\n})\n\nexport type WebConfiguration = schema.define.infer<typeof WebConfigurationSchema>\nexport type WebConfigurationCommands = keyof WebConfiguration['commands']\n\nexport interface Web {\n  directory: string\n  configuration: WebConfiguration\n}\n\nexport interface App {\n  name: string\n  idEnvironmentVariableName: string\n  directory: string\n  dependencyManager: dependency.DependencyManager\n  configuration: AppConfiguration\n  configurationPath: string\n  nodeDependencies: {[key: string]: string}\n  webs: Web[]\n  dotenv?: dotenv.DotEnvFile\n  extensions: {\n    ui: UIExtension[]\n    theme: ThemeExtension[]\n    function: FunctionExtension[]\n  }\n  errors?: AppErrors\n}\n\nexport type AppLoaderMode = 'strict' | 'report'\n\ninterface AppLoaderConstructorArgs {\n  directory: string\n  mode: AppLoaderMode\n}\n\nclass AppErrors {\n  private errors: {\n    [key: string]: output.Message\n  } = {}\n\n  addError(path: string, message: output.Message): void {\n    this.errors[path] = message\n  }\n\n  getError(path: string): output.Message {\n    return this.errors[path]\n  }\n\n  isEmpty() {\n    return Object.keys(this.errors).length === 0\n  }\n\n  toJSON(): output.Message[] {\n    return Object.values(this.errors)\n  }\n}\n\nclass AppLoader {\n  private directory: string\n  private mode: AppLoaderMode\n  private appDirectory = ''\n  private configurationPath = ''\n  private errors: AppErrors = new AppErrors()\n\n  constructor({directory, mode}: AppLoaderConstructorArgs) {\n    this.mode = mode\n    this.directory = directory\n  }\n\n  async loaded() {\n    this.appDirectory = await this.findAppDirectory()\n    const configurationPath = await this.getConfigurationPath()\n    const configuration = await this.parseConfigurationFile(AppConfigurationSchema, configurationPath)\n    const extensionsPath = path.join(this.appDirectory, `${blocks.extensions.directoryName}`)\n    const dotenv = await this.loadDotEnv()\n    const functions = await this.loadFunctions(extensionsPath)\n    const uiExtensions = await this.loadUIExtensions(extensionsPath)\n    const themeExtensions = await this.loadThemeExtensions(extensionsPath)\n    const packageJSONPath = path.join(this.appDirectory, 'package.json')\n    const name = await dependency.getPackageName(packageJSONPath)\n    const nodeDependencies = await dependency.getDependencies(packageJSONPath)\n    const dependencyManager = await dependency.getDependencyManager(this.appDirectory)\n\n    const app: App = {\n      name,\n      idEnvironmentVariableName: 'SHOPIFY_API_KEY',\n      directory: this.appDirectory,\n      webs: await this.loadWebs(),\n      configuration,\n      configurationPath,\n      dotenv,\n      extensions: {ui: uiExtensions, theme: themeExtensions, function: functions},\n      dependencyManager,\n      nodeDependencies,\n    }\n    if (!this.errors.isEmpty()) app.errors = this.errors\n    return app\n  }\n\n  async loadDotEnv(): Promise<dotenv.DotEnvFile | undefined> {\n    let dotEnvFile: dotenv.DotEnvFile | undefined\n    const dotEnvPath = path.join(this.appDirectory, dotEnvFileNames.production)\n    if (await file.exists(dotEnvPath)) {\n      dotEnvFile = await dotenv.read(dotEnvPath)\n    }\n    return dotEnvFile\n  }\n\n  async findAppDirectory() {\n    if (!(await file.exists(this.directory))) {\n      throw new error.Abort(output.content`Couldn't find directory ${output.token.path(this.directory)}`)\n    }\n    return path.dirname(await this.getConfigurationPath())\n  }\n\n  async getConfigurationPath() {\n    if (this.configurationPath) return this.configurationPath\n\n    const configurationPath = await path.findUp(configurationFileNames.app, {\n      cwd: this.directory,\n      type: 'file',\n    })\n    if (!configurationPath) {\n      throw new error.Abort(\n        output.content`Couldn't find the configuration file for ${output.token.path(\n          this.directory,\n        )}, are you in an app directory?`,\n      )\n    }\n\n    this.configurationPath = configurationPath\n    return configurationPath\n  }\n\n  async loadWebs(): Promise<Web[]> {\n    const webTomlPaths = await path.glob(path.join(this.appDirectory, `web/**/${configurationFileNames.web}`))\n\n    const webs = await Promise.all(webTomlPaths.map((path) => this.loadWeb(path)))\n\n    return webs\n  }\n\n  async loadWeb(WebConfigurationFile: string): Promise<Web> {\n    return {\n      directory: path.dirname(WebConfigurationFile),\n      configuration: await this.parseConfigurationFile(WebConfigurationSchema, WebConfigurationFile),\n    }\n  }\n\n  async loadConfigurationFile(\n    filepath: string,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    decode: (input: any) => any = toml.decode,\n  ): Promise<unknown> {\n    if (!(await file.exists(filepath))) {\n      return this.abortOrReport(\n        output.content`Couldn't find the configuration file at ${output.token.path(filepath)}`,\n        '',\n        filepath,\n      )\n    }\n    const configurationContent = await file.read(filepath)\n    let configuration: object\n    try {\n      configuration = decode(configurationContent)\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (err: any) {\n      // TOML errors have line, pos and col properties\n      if (err.line && err.pos && err.col) {\n        return this.abortOrReport(\n          output.content`Fix the following error in ${output.token.path(filepath)}:\\n${err.message}`,\n          null,\n          filepath,\n        )\n      } else {\n        throw err\n      }\n    }\n    // Convert snake_case keys to camelCase before returning\n    return {\n      ...Object.fromEntries(Object.entries(configuration).map((kv) => [string.camelize(kv[0]), kv[1]])),\n    }\n  }\n\n  async parseConfigurationFile<TSchema extends schema.define.ZodType>(\n    schema: TSchema,\n    filepath: string,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    decode: (input: any) => any = toml.decode,\n  ): Promise<schema.define.TypeOf<TSchema>> {\n    const fallbackOutput = {} as schema.define.TypeOf<TSchema>\n\n    const configurationObject = await this.loadConfigurationFile(filepath, decode)\n    if (!configurationObject) return fallbackOutput\n\n    const parseResult = schema.safeParse(configurationObject)\n\n    if (!parseResult.success) {\n      const formattedError = JSON.stringify(parseResult.error.issues, null, 2)\n      return this.abortOrReport(\n        output.content`Fix a schema error in ${output.token.path(filepath)}:\\n${formattedError}`,\n        fallbackOutput,\n        filepath,\n      )\n    }\n    return parseResult.data\n  }\n\n  async loadUIExtensions(extensionsPath: string): Promise<UIExtension[]> {\n    const extensionConfigPaths = path.join(extensionsPath, `*/${configurationFileNames.extension.ui}`)\n    const configPaths = await path.glob(extensionConfigPaths)\n\n    const extensions = configPaths.map(async (configurationPath) => {\n      const directory = path.dirname(configurationPath)\n      const configuration = await this.parseConfigurationFile(UIExtensionConfigurationSchema, configurationPath)\n      const entrySourceFilePath = (\n        await Promise.all(\n          ['index']\n            .flatMap((name) => [`${name}.js`, `${name}.jsx`, `${name}.ts`, `${name}.tsx`])\n            .flatMap((fileName) => [`src/${fileName}`, `${fileName}`])\n            .map((relativePath) => path.join(directory, relativePath))\n            .map(async (sourcePath) => ((await file.exists(sourcePath)) ? sourcePath : undefined)),\n        )\n      ).find((sourcePath) => sourcePath !== undefined)\n      if (!entrySourceFilePath) {\n        this.abortOrReport(\n          output.content`Couldn't find an index.{js,jsx,ts,tsx} file in the directories ${output.token.path(\n            directory,\n          )} or ${output.token.path(path.join(directory, 'src'))}`,\n          undefined,\n          directory,\n        )\n      }\n\n      return {\n        idEnvironmentVariableName: `SHOPIFY_${string.constantize(path.basename(directory))}_ID`,\n        directory,\n        configuration,\n        configurationPath,\n        type: configuration.type,\n        graphQLType: extensionGraphqlId(configuration.type),\n        buildDirectory: path.join(directory, 'dist'),\n        entrySourceFilePath: entrySourceFilePath ?? '',\n        localIdentifier: path.basename(directory),\n        // The convention is that unpublished extensions will have a random UUID with prefix `dev-`\n        devUUID: `dev-${id.generateRandomUUID()}`,\n      }\n    })\n    return Promise.all(extensions)\n  }\n\n  async loadFunctions(extensionsPath: string): Promise<FunctionExtension[]> {\n    const functionConfigPaths = await path.join(extensionsPath, `*/${configurationFileNames.extension.function}`)\n    const configPaths = await path.glob(functionConfigPaths)\n\n    const functions = configPaths.map(async (configurationPath) => {\n      const directory = path.dirname(configurationPath)\n      const configuration = await this.parseConfigurationFile(FunctionExtensionConfigurationSchema, configurationPath)\n      const metadata = await this.parseConfigurationFile(\n        FunctionExtensionMetadataSchema,\n        path.join(directory, 'metadata.json'),\n        JSON.parse,\n      )\n      return {\n        directory,\n        configuration,\n        configurationPath,\n        metadata,\n        type: configuration.type,\n        graphQLType: extensionGraphqlId(configuration.type),\n        idEnvironmentVariableName: `SHOPIFY_${string.constantize(path.basename(directory))}_ID`,\n        localIdentifier: path.basename(directory),\n        buildWasmPath() {\n          return configuration.build.path\n            ? path.join(directory, configuration.build.path)\n            : path.join(directory, 'dist/index.wasm')\n        },\n        inputQueryPath() {\n          return path.join(directory, 'input.graphql')\n        },\n      }\n    })\n    return Promise.all(functions)\n  }\n\n  async loadThemeExtensions(extensionsPath: string): Promise<ThemeExtension[]> {\n    const themeConfigPaths = await path.join(extensionsPath, `*/${configurationFileNames.extension.theme}`)\n    const configPaths = await path.glob(themeConfigPaths)\n\n    const themeExtensions = configPaths.map(async (configurationPath) => {\n      const directory = path.dirname(configurationPath)\n      const configuration = await this.parseConfigurationFile(ThemeExtensionConfigurationSchema, configurationPath)\n      return {\n        directory,\n        configuration,\n        configurationPath,\n        type: configuration.type,\n        graphQLType: extensionGraphqlId(configuration.type),\n        idEnvironmentVariableName: `SHOPIFY_${string.constantize(path.basename(directory))}_ID`,\n        localIdentifier: path.basename(directory),\n      }\n    })\n    return Promise.all(themeExtensions)\n  }\n\n  abortOrReport<T>(errorMessage: output.Message, fallback: T, configurationPath: string): T {\n    if (this.mode === 'strict') {\n      throw new error.Abort(errorMessage)\n    } else {\n      this.errors.addError(configurationPath, errorMessage)\n      return fallback\n    }\n  }\n}\n\n/**\n * Reads the dependencies from the app's package.json and creates a copy\n * of the app with the list of dependencies updated.\n * @param app {App} App whose Node dependencies will be updated.\n * @returns {Promise<App>} The app with the Node dependencies updated.\n */\nexport async function updateDependencies(app: App): Promise<App> {\n  const nodeDependencies = await dependency.getDependencies(path.join(app.directory, 'package.json'))\n  return {\n    ...app,\n    nodeDependencies,\n  }\n}\n\ntype UpdateAppIdentifiersCommand = 'dev' | 'deploy'\n\ninterface UpdateAppIdentifiersOptions {\n  app: App\n  identifiers: UuidOnlyIdentifiers\n  command: UpdateAppIdentifiersCommand\n}\n\n/**\n * Given an app and a set of identifiers, it persists the identifiers in the .env files.\n * @param options {UpdateAppIdentifiersOptions} Options.\n * @returns {App} An copy of the app with the environment updated to reflect the updated identifiers.\n */\nexport async function updateAppIdentifiers(\n  {app, identifiers, command}: UpdateAppIdentifiersOptions,\n  systemEnvironment = process.env,\n): Promise<App> {\n  let dotenvFile = app.dotenv\n  if (!dotenvFile) {\n    dotenvFile = {\n      path: path.join(app.directory, dotEnvFileNames.production),\n      variables: {},\n    }\n  }\n  const updatedVariables: {[key: string]: string} = {...(app.dotenv?.variables ?? {})}\n  if (!systemEnvironment[app.idEnvironmentVariableName]) {\n    updatedVariables[app.idEnvironmentVariableName] = identifiers.app\n  }\n  Object.keys(identifiers.extensions).forEach((identifier) => {\n    const envVariable = `SHOPIFY_${string.constantize(identifier)}_ID`\n    if (!systemEnvironment[envVariable]) {\n      updatedVariables[envVariable] = identifiers.extensions[identifier]\n    }\n  })\n\n  const write = JSON.stringify(dotenvFile.variables) !== JSON.stringify(updatedVariables) && command === 'deploy'\n  dotenvFile.variables = updatedVariables\n  if (write) {\n    await dotenv.write(dotenvFile)\n  }\n  return {\n    ...app,\n    dotenv: dotenvFile,\n  }\n}\n\ninterface GetAppIdentifiersOptions {\n  app: App\n}\n\n/**\n * Given an app and a environment, it fetches the ids from the environment\n * and returns them.\n * @param options {GetAppIdentifiersOptions} Options.\n * @returns\n */\nexport function getAppIdentifiers(\n  {app}: GetAppIdentifiersOptions,\n  systemEnvironment = process.env,\n): Partial<UuidOnlyIdentifiers> {\n  const envVariables = {\n    ...app.dotenv?.variables,\n    ...(systemEnvironment as {[variable: string]: string}),\n  }\n  const extensionsIdentifiers: {[key: string]: string} = {}\n  const processExtension = (extension: Extension) => {\n    if (Object.keys(envVariables).includes(extension.idEnvironmentVariableName)) {\n      extensionsIdentifiers[extension.localIdentifier] = envVariables[extension.idEnvironmentVariableName]\n    }\n  }\n  app.extensions.ui.forEach(processExtension)\n  app.extensions.function.forEach(processExtension)\n  app.extensions.theme.forEach(processExtension)\n\n  return {\n    app: envVariables[app.idEnvironmentVariableName],\n    extensions: extensionsIdentifiers,\n  }\n}\n\ntype RendererVersionResult = {name: string; version: string} | undefined | 'not_found'\n\n/**\n * Given a UI extension and the app it belongs to, it returns the version of the renderer package.\n * Looks for `/node_modules/@shopify/{renderer-package-name}/package.json` to find the real version used.\n * @param uiExtensionType {UIExtensionTypes} UI extension whose renderer version will be obtained.\n * @param app {App} App object containing the extension.\n * @returns {{name: string; version: string} | undefined} The version if the dependency exists.\n */\nexport async function getUIExtensionRendererVersion(\n  uiExtensionType: UIExtensionTypes,\n  app: App,\n): Promise<RendererVersionResult> {\n  // Look for the vanilla JS version of the dependency (the react one depends on it, will always be present)\n  const fullName = getUIExtensionRendererDependency(uiExtensionType)?.name.replace('-react', '')\n  if (!fullName) return undefined\n  // Split the dependency name to avoid using \"/\" in windows\n  const dependencyName = fullName.split('/')\n\n  // Find the package.json in the project structure\n  const realPath = path.join('node_modules', dependencyName[0], dependencyName[1], 'package.json')\n  const packagePath = await path.findUp(realPath, {type: 'file', cwd: app.directory})\n  if (!packagePath) return 'not_found'\n\n  // Load the package.json and extract the version\n  const packageContent = await dependency.packageJSONContents(packagePath)\n  if (!packageContent.version) return 'not_found'\n  return {name: fullName, version: packageContent.version}\n}\n\nexport async function load(directory: string, mode: AppLoaderMode = 'strict'): Promise<App> {\n  const loader = new AppLoader({directory, mode})\n  return loader.loaded()\n}\n\nexport function hasExtensions(app: App): boolean {\n  return app.extensions.ui.length !== 0 || app.extensions.function.length !== 0 || app.extensions.theme.length !== 0\n}\n\n/**\n * Each extension has a different ID in graphQL.\n * Sometimes the ID is the same as the type, sometimes it's different.\n * @param type {string} The extension type\n * @returns {string} The extension GraphQL ID\n */\nexport const extensionGraphqlId = (type: ExtensionTypes) => {\n  switch (type) {\n    case 'product_subscription':\n      return 'SUBSCRIPTION_MANAGEMENT'\n    case 'checkout_ui_extension':\n      return 'CHECKOUT_UI_EXTENSION'\n    case 'checkout_post_purchase':\n      return 'CHECKOUT_POST_PURCHASE'\n    case 'pos_ui_extension':\n      return 'POS_UI_EXTENSION'\n    case 'theme':\n      return 'THEME_APP_EXTENSION'\n    case 'web_pixel_extension':\n      return 'WEB_PIXEL_EXTENSION'\n    case 'product_discounts':\n    case 'order_discounts':\n    case 'shipping_discounts':\n    case 'payment_methods':\n    case 'shipping_rate_presenter':\n      // As we add new extensions, this bug will force us to add a new case here.\n      return type\n  }\n}\n"],"names":[],"mappings":"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"}