import { api, error, output, ui } from '@shopify/cli-kit';

const NoOrgError = (organizationId) => {
  const nextSteps = [
    output.content`Have you ${output.token.link("created a Shopify Partners organization", "https://partners.shopify.com/signup")}?`,
    output.content`Have you confirmed your accounts from the emails you received?`,
    output.content`Need to connect to a different App or organization? Run the command again with ${output.token.genericShellCommand("--reset")}`
  ];
  if (organizationId) {
    nextSteps.push(output.content`Do you have access to the right Shopify Partners organization? The CLI is loading ${output.token.link("this organization", `https://partner.shopify.com/${organizationId}`)}`);
  }
  return new error.Abort(`No Organization found`, nextSteps.map((content) => `\xB7 ${output.stringifyMessage(content)}`).join("\n"));
};
async function fetchAppExtensionRegistrations({
  token,
  apiKey
}) {
  const query = api.graphql.AllAppExtensionRegistrationsQuery;
  const result = await api.partners.request(query, token, {
    apiKey
  });
  return result;
}
async function fetchOrganizations(token) {
  const query = api.graphql.AllOrganizationsQuery;
  const result = await api.partners.request(query, token);
  const organizations = result.organizations.nodes;
  if (organizations.length === 0)
    throw NoOrgError();
  return organizations;
}
async function fetchOrgAndApps(orgId, token) {
  const query = api.graphql.FindOrganizationQuery;
  const result = await api.partners.request(query, token, { id: orgId });
  const org = result.organizations.nodes[0];
  if (!org)
    throw NoOrgError(orgId);
  const parsedOrg = { id: org.id, businessName: org.businessName, appsNext: org.appsNext };
  return { organization: parsedOrg, apps: org.apps.nodes, stores: [] };
}
async function fetchAppFromApiKey(apiKey, token) {
  const res = await api.partners.request(api.graphql.FindAppQuery, token, { apiKey });
  return res.app;
}
async function fetchOrgFromId(id, token) {
  const query = api.graphql.FindOrganizationBasicQuery;
  const res = await api.partners.request(query, token, { id });
  return res.organizations.nodes[0];
}
async function fetchAllStores(orgId, token) {
  const query = api.graphql.AllStoresByOrganizationQuery;
  const result = await api.partners.request(query, token, { id: orgId });
  return result.organizations.nodes[0].stores.nodes;
}

async function selectOrganizationPrompt(organizations) {
  if (organizations.length === 1) {
    return organizations[0];
  }
  const orgList = organizations.map((org) => ({ name: org.businessName, value: org.id }));
  const choice = await ui.prompt([
    {
      type: "autocomplete",
      name: "id",
      message: "Which Partners organization is this work for?",
      choices: orgList
    }
  ]);
  return organizations.find((org) => org.id === choice.id);
}
async function selectAppPrompt(apps) {
  const appList = apps.map((app) => ({ name: app.title, value: app.apiKey }));
  const choice = await ui.prompt([
    {
      type: "autocomplete",
      name: "apiKey",
      message: "Which existing app is this for?",
      choices: appList
    }
  ]);
  return apps.find((app) => app.apiKey === choice.apiKey);
}
async function selectStorePrompt(stores) {
  if (stores.length === 0)
    return void 0;
  if (stores.length === 1) {
    output.completed(`Using your default dev store (${stores[0].shopName}) to preview your project.`);
    return stores[0];
  }
  const storeList = stores.map((store) => ({ name: store.shopName, value: store.shopId }));
  const choice = await ui.prompt([
    {
      type: "autocomplete",
      name: "id",
      message: "Which development store would you like to use to view your project?",
      choices: storeList
    }
  ]);
  return stores.find((store) => store.shopId === choice.id);
}
async function appTypePrompt() {
  const options = [
    { name: "Public: An app built for a wide merchant audience.", value: "public" },
    { name: "Custom: An app custom built for a single client.", value: "custom" }
  ];
  const choice = await ui.prompt([
    {
      type: "select",
      name: "value",
      message: "What type of app are you building?",
      choices: options
    }
  ]);
  return choice.value;
}
async function appNamePrompt(currentName) {
  const input = await ui.prompt([
    {
      type: "input",
      name: "name",
      message: "App Name",
      default: currentName,
      validate: (value) => {
        if (value.length === 0) {
          return "App name can't be empty";
        }
        if (value.length > 30) {
          return "Enter a shorter name (30 character max.)";
        }
        if (value.includes("shopify")) {
          return `Name can't contain "shopify." Enter another name.`;
        }
        return true;
      }
    }
  ]);
  return input.name;
}
async function reloadStoreListPrompt(org) {
  const options = [
    { name: `Yes, ${org.businessName} has a new dev store`, value: "reload" },
    { name: "No, cancel dev", value: "cancel" }
  ];
  const choice = await ui.prompt([
    {
      type: "select",
      name: "value",
      message: "Finished creating a dev store?",
      choices: options
    }
  ]);
  return choice.value === "reload";
}
async function createAsNewAppPrompt() {
  const options = [
    { name: "Yes, create it as a new app", value: "yes" },
    { name: "No, connect it to an existing app", value: "cancel" }
  ];
  const choice = await ui.prompt([
    {
      type: "select",
      name: "value",
      message: "Create this project as a new app on Shopify?",
      choices: options
    }
  ]);
  return choice.value === "yes";
}
async function reuseDevConfigPrompt() {
  const options = [
    { name: "Yes, deploy in the same way", value: "yes" },
    { name: "No, use a different org or app", value: "cancel" }
  ];
  const choice = await ui.prompt([
    {
      type: "select",
      name: "value",
      message: "Deploy to the same org and app as you used for dev?",
      choices: options
    }
  ]);
  return choice.value === "yes";
}

async function selectOrCreateApp(localApp, apps, org, token, cachedApiKey) {
  if (cachedApiKey) {
    const cachedApp = await fetchAppFromApiKey(cachedApiKey, token);
    if (cachedApp)
      return cachedApp;
  }
  let createNewApp = apps.length === 0;
  if (!createNewApp)
    createNewApp = await createAsNewAppPrompt();
  const app = createNewApp ? await createApp(org, localApp, token) : await selectAppPrompt(apps);
  return app;
}
async function createApp(org, app, token) {
  const name = await appNamePrompt(app.name);
  const type = org.appsNext ? "undecided" : await appTypePrompt();
  const variables = {
    org: parseInt(org.id, 10),
    title: `${name}`,
    appUrl: "https://shopify.github.io/shopify-cli/help/start-app/",
    redir: ["http://localhost:3456"],
    type
  };
  const query = api.graphql.CreateAppQuery;
  const result = await api.partners.request(query, token, variables);
  if (result.appCreate.userErrors.length > 0) {
    const errors = result.appCreate.userErrors.map((error2) => error2.message).join(", ");
    throw new error.Abort(errors);
  }
  output.success(`${result.appCreate.app.title} has been created on your Partners account`);
  const createdApp = result.appCreate.app;
  createdApp.organizationId = org.id;
  return createdApp;
}

export { fetchAllStores as a, selectOrCreateApp as b, fetchAppFromApiKey as c, fetchOrgAndApps as d, fetchOrganizations as e, fetchAppExtensionRegistrations as f, selectOrganizationPrompt as g, fetchOrgFromId as h, reuseDevConfigPrompt as i, reloadStoreListPrompt as r, selectStorePrompt as s };
//# sourceMappingURL=select-app-bae6a630.js.map
