{"version":3,"file":"select-app-bae6a630.js","sources":["../src/cli/services/dev/fetch.ts","../src/cli/prompts/dev.ts","../src/cli/services/dev/select-app.ts"],"sourcesContent":["import {Organization, OrganizationApp, OrganizationStore} from '../../models/organization'\nimport {api, error, output} from '@shopify/cli-kit'\n\nexport const NoOrgError = (organizationId?: string) => {\n  const nextSteps = [\n    output.content`Have you ${output.token.link(\n      'created a Shopify Partners organization',\n      'https://partners.shopify.com/signup',\n    )}?`,\n    output.content`Have you confirmed your accounts from the emails you received?`,\n    output.content`Need to connect to a different App or organization? Run the command again with ${output.token.genericShellCommand(\n      '--reset',\n    )}`,\n  ]\n  if (organizationId) {\n    nextSteps.push(\n      output.content`Do you have access to the right Shopify Partners organization? The CLI is loading ${output.token.link(\n        'this organization',\n        `https://partner.shopify.com/${organizationId}`,\n      )}`,\n    )\n  }\n  return new error.Abort(\n    `No Organization found`,\n    nextSteps.map((content) => `Â· ${output.stringifyMessage(content)}`).join('\\n'),\n  )\n}\n\nexport interface FetchResponse {\n  organization: Organization\n  apps: OrganizationApp[]\n  stores: OrganizationStore[]\n}\n\nexport async function fetchAppExtensionRegistrations({\n  token,\n  apiKey,\n}: {\n  token: string\n  apiKey: string\n}): Promise<api.graphql.AllAppExtensionRegistrationsQuerySchema> {\n  const query = api.graphql.AllAppExtensionRegistrationsQuery\n  const result: api.graphql.AllAppExtensionRegistrationsQuerySchema = await api.partners.request(query, token, {\n    apiKey,\n  })\n  return result\n}\n\n/**\n * Fetch all organizations the user belongs to\n * If the user doesn't belong to any org, throw an error\n * @param token {string} Token to access partners API\n * @returns {Promise<Organization[]>} List of organizations\n */\nexport async function fetchOrganizations(token: string) {\n  const query = api.graphql.AllOrganizationsQuery\n  const result: api.graphql.AllOrganizationsQuerySchema = await api.partners.request(query, token)\n  const organizations = result.organizations.nodes\n  if (organizations.length === 0) throw NoOrgError()\n  return organizations\n}\n\n/**\n * Fetch all apps and stores for the given organization\n * @param orgId {string} Organization ID\n * @param token {string} Token to access partners API\n * @returns {Promise<FetchResponse>} Current organization details and list of apps and stores\n */\nexport async function fetchOrgAndApps(orgId: string, token: string): Promise<FetchResponse> {\n  const query = api.graphql.FindOrganizationQuery\n  const result: api.graphql.FindOrganizationQuerySchema = await api.partners.request(query, token, {id: orgId})\n  const org = result.organizations.nodes[0]\n  if (!org) throw NoOrgError(orgId)\n  const parsedOrg = {id: org.id, businessName: org.businessName, appsNext: org.appsNext}\n  return {organization: parsedOrg, apps: org.apps.nodes, stores: []}\n}\n\nexport async function fetchAppFromApiKey(apiKey: string, token: string): Promise<OrganizationApp | undefined> {\n  const res: api.graphql.FindAppQuerySchema = await api.partners.request(api.graphql.FindAppQuery, token, {apiKey})\n  return res.app\n}\n\nexport async function fetchOrgFromId(id: string, token: string): Promise<Organization | undefined> {\n  const query = api.graphql.FindOrganizationBasicQuery\n  const res: api.graphql.FindOrganizationBasicQuerySchema = await api.partners.request(query, token, {id})\n  return res.organizations.nodes[0]\n}\n\nexport async function fetchAllStores(orgId: string, token: string): Promise<OrganizationStore[]> {\n  const query = api.graphql.AllStoresByOrganizationQuery\n  const result: api.graphql.AllStoresByOrganizationSchema = await api.partners.request(query, token, {id: orgId})\n  return result.organizations.nodes[0].stores.nodes\n}\n","import {Organization, OrganizationApp, OrganizationStore} from '../models/organization'\nimport {output, ui} from '@shopify/cli-kit'\n\nexport async function selectOrganizationPrompt(organizations: Organization[]): Promise<Organization> {\n  if (organizations.length === 1) {\n    return organizations[0]\n  }\n  const orgList = organizations.map((org) => ({name: org.businessName, value: org.id}))\n  const choice = await ui.prompt([\n    {\n      type: 'autocomplete',\n      name: 'id',\n      message: 'Which Partners organization is this work for?',\n      choices: orgList,\n    },\n  ])\n  return organizations.find((org) => org.id === choice.id)!\n}\n\nexport async function selectAppPrompt(apps: OrganizationApp[]): Promise<OrganizationApp> {\n  const appList = apps.map((app) => ({name: app.title, value: app.apiKey}))\n  const choice = await ui.prompt([\n    {\n      type: 'autocomplete',\n      name: 'apiKey',\n      message: 'Which existing app is this for?',\n      choices: appList,\n    },\n  ])\n  return apps.find((app) => app.apiKey === choice.apiKey)!\n}\n\nexport async function selectStorePrompt(stores: OrganizationStore[]): Promise<OrganizationStore | undefined> {\n  if (stores.length === 0) return undefined\n  if (stores.length === 1) {\n    output.completed(`Using your default dev store (${stores[0].shopName}) to preview your project.`)\n    return stores[0]\n  }\n  const storeList = stores.map((store) => ({name: store.shopName, value: store.shopId}))\n\n  const choice = await ui.prompt([\n    {\n      type: 'autocomplete',\n      name: 'id',\n      message: 'Which development store would you like to use to view your project?',\n      choices: storeList,\n    },\n  ])\n  return stores.find((store) => store.shopId === choice.id)\n}\n\nexport async function appTypePrompt(): Promise<'public' | 'custom'> {\n  const options = [\n    {name: 'Public: An app built for a wide merchant audience.', value: 'public'},\n    {name: 'Custom: An app custom built for a single client.', value: 'custom'},\n  ]\n\n  const choice: {value: 'public' | 'custom'} = await ui.prompt([\n    {\n      type: 'select',\n      name: 'value',\n      message: 'What type of app are you building?',\n      choices: options,\n    },\n  ])\n  return choice.value\n}\n\nexport async function appNamePrompt(currentName: string): Promise<string> {\n  const input = await ui.prompt([\n    {\n      type: 'input',\n      name: 'name',\n      message: 'App Name',\n      default: currentName,\n      validate: (value) => {\n        if (value.length === 0) {\n          return \"App name can't be empty\"\n        }\n        if (value.length > 30) {\n          return 'Enter a shorter name (30 character max.)'\n        }\n        if (value.includes('shopify')) {\n          return 'Name can\\'t contain \"shopify.\" Enter another name.'\n        }\n        return true\n      },\n    },\n  ])\n  return input.name\n}\n\nexport async function reloadStoreListPrompt(org: Organization): Promise<boolean> {\n  const options = [\n    {name: `Yes, ${org.businessName} has a new dev store`, value: 'reload'},\n    {name: 'No, cancel dev', value: 'cancel'},\n  ]\n\n  const choice = await ui.prompt([\n    {\n      type: 'select',\n      name: 'value',\n      message: 'Finished creating a dev store?',\n      choices: options,\n    },\n  ])\n  return choice.value === 'reload'\n}\n\nexport async function createAsNewAppPrompt(): Promise<boolean> {\n  const options = [\n    {name: 'Yes, create it as a new app', value: 'yes'},\n    {name: 'No, connect it to an existing app', value: 'cancel'},\n  ]\n\n  const choice = await ui.prompt([\n    {\n      type: 'select',\n      name: 'value',\n      message: 'Create this project as a new app on Shopify?',\n      choices: options,\n    },\n  ])\n  return choice.value === 'yes'\n}\n\nexport async function reuseDevConfigPrompt(): Promise<boolean> {\n  const options = [\n    {name: 'Yes, deploy in the same way', value: 'yes'},\n    {name: 'No, use a different org or app', value: 'cancel'},\n  ]\n\n  const choice = await ui.prompt([\n    {\n      type: 'select',\n      name: 'value',\n      message: 'Deploy to the same org and app as you used for dev?',\n      choices: options,\n    },\n  ])\n  return choice.value === 'yes'\n}\n","import {fetchAppFromApiKey} from './fetch'\nimport {appNamePrompt, appTypePrompt, createAsNewAppPrompt, selectAppPrompt} from '../../prompts/dev'\nimport {App} from '../../models/app/app'\nimport {Organization, OrganizationApp} from '../../models/organization'\nimport {api, error, output} from '@shopify/cli-kit'\n\n/**\n * Select an app from env, list or create a new one:\n * If a cachedAppId is provided, we check if it is valid and return it. If it's not valid, ignore it.\n * If there is no valid app yet, prompt the user to select one from the list or create a new one.\n * If no apps exists, we automatically prompt the user to create a new one.\n * @param app {App} Current local app information\n * @param apps {OrganizationApp[]} List of remote available apps\n * @param orgId {string} Current Organization\n * @param cachedAppId {string} Cached app apikey\n * @returns {Promise<OrganizationApp>} The selected (or created) app\n */\nexport async function selectOrCreateApp(\n  localApp: App,\n  apps: OrganizationApp[],\n  org: Organization,\n  token: string,\n  cachedApiKey?: string,\n): Promise<OrganizationApp> {\n  if (cachedApiKey) {\n    const cachedApp = await fetchAppFromApiKey(cachedApiKey, token)\n    if (cachedApp) return cachedApp\n  }\n\n  let createNewApp = apps.length === 0\n  if (!createNewApp) createNewApp = await createAsNewAppPrompt()\n  const app = createNewApp ? await createApp(org, localApp, token) : await selectAppPrompt(apps)\n\n  return app\n}\n\nexport async function createApp(org: Organization, app: App, token: string): Promise<OrganizationApp> {\n  const name = await appNamePrompt(app.name)\n\n  const type = org.appsNext ? 'undecided' : await appTypePrompt()\n  const variables: api.graphql.CreateAppQueryVariables = {\n    org: parseInt(org.id, 10),\n    title: `${name}`,\n    appUrl: 'https://shopify.github.io/shopify-cli/help/start-app/',\n    redir: ['http://localhost:3456'],\n    type,\n  }\n\n  const query = api.graphql.CreateAppQuery\n  const result: api.graphql.CreateAppQuerySchema = await api.partners.request(query, token, variables)\n  if (result.appCreate.userErrors.length > 0) {\n    const errors = result.appCreate.userErrors.map((error) => error.message).join(', ')\n    throw new error.Abort(errors)\n  }\n\n  output.success(`${result.appCreate.app.title} has been created on your Partners account`)\n  const createdApp = result.appCreate.app\n  createdApp.organizationId = org.id\n  return createdApp\n}\n"],"names":[],"mappings":"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"}