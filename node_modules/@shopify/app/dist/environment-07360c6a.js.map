{"version":3,"file":"environment-07360c6a.js","sources":["../src/cli/services/dev/select-store.ts","../src/cli/services/environment/id-matching.ts","../src/cli/services/environment/id-manual-matching.ts","../src/cli/services/dev/create-extension.ts","../src/cli/services/environment/identifiers.ts","../src/cli/services/environment.ts"],"sourcesContent":["import {fetchAllStores} from './fetch'\nimport {Organization, OrganizationStore} from '../../models/organization'\nimport {reloadStoreListPrompt, selectStorePrompt} from '../../prompts/dev'\nimport {error, output, api, system, ui, environment} from '@shopify/cli-kit'\n\nconst ConvertToDevError = (storeName: string, message: string) => {\n  return new error.Bug(\n    `Error converting store ${storeName} to a Test store: ${message}`,\n    'This store might not be compatible with draft apps, please try a different store',\n  )\n}\n\nconst StoreNotFoundError = (storeName: string, org: Organization) => {\n  return new error.Bug(\n    `Could not find ${storeName} in the Organization ${org.businessName} as a valid development store.`,\n    `Visit https://partners.shopify.com/${org.id}/stores to create a new store in your organization`,\n  )\n}\n\nconst InvalidStore = (storeName: string) => {\n  return new error.Bug(`${storeName} can't be used to test draft apps`, 'Please try with a different store.')\n}\n\nconst CreateStoreLink = (orgId: string) => {\n  const url = `https://partners.shopify.com/${orgId}/stores/new?store_type=dev_store`\n  return (\n    `Looks like you don't have a dev store in the Partners org you selected. ` +\n    `Keep going â€” create a dev store on Shopify Partners:\\n${url}\\n`\n  )\n}\n\n/**\n * Select store from list or\n * If a cachedStoreName is provided, we check if it is valid and return it. If it's not valid, ignore it.\n * If there are no stores, show a link to create a store and prompt the user to refresh the store list\n * If no store is finally selected, exit process\n * @param stores {OrganizationStore[]} List of available stores\n * @param orgId {string} Current organization ID\n * @param cachedStoreName {string} Cached store name\n * @returns {Promise<string>} The selected store\n */\nexport async function selectStore(\n  stores: OrganizationStore[],\n  org: Organization,\n  token: string,\n  cachedStoreName?: string,\n): Promise<string> {\n  if (cachedStoreName) {\n    await convertToTestStoreIfNeeded(cachedStoreName, stores, org, token)\n    return cachedStoreName\n  }\n\n  const store = await selectStorePrompt(stores)\n  if (store) {\n    await convertToTestStoreIfNeeded(store.shopDomain, stores, org, token)\n    return store.shopDomain\n  }\n\n  output.info(`\\n${CreateStoreLink(org.id)}`)\n  await system.sleep(5)\n\n  const reload = await reloadStoreListPrompt(org)\n  if (!reload) {\n    throw new error.CancelExecution()\n  }\n\n  const data = await waitForCreatedStore(org.id, token)\n  return selectStore(data, org, token)\n}\n\n/**\n * Retrieves the list of stores from an organization, retrying a few times if the list is empty.\n * That is because after creating the dev store, it can take some seconds for the API to return it.\n * @param orgId {string} Current organization ID\n * @param token {string} Token to access partners API\n * @returns {Promise<OrganizationStore[]>} List of stores\n */\nasync function waitForCreatedStore(orgId: string, token: string): Promise<OrganizationStore[]> {\n  const retries = 10\n  const secondsToWait = 3\n  let data = [] as OrganizationStore[]\n  const list = new ui.Listr(\n    [\n      {\n        title: 'Fetching organization data',\n        task: async () => {\n          for (let i = 0; i < retries; i++) {\n            // eslint-disable-next-line no-await-in-loop\n            const stores = await fetchAllStores(orgId, token)\n            if (stores.length > 0) {\n              data = stores\n              return\n            }\n            // eslint-disable-next-line no-await-in-loop\n            await system.sleep(secondsToWait)\n          }\n        },\n      },\n    ],\n    {rendererSilent: environment.local.isUnitTest()},\n  )\n  await list.run()\n\n  return data\n}\n\n/**\n * Check if the store exists in the current organization and it is a valid store\n * To be valid, it must be non-transferable.\n * @param storeDomain {string} Store domain to check\n * @param stores {OrganizationStore[]} List of available stores\n * @param orgId {string} Current organization ID\n * @param token {string} Token to access partners API\n * @returns {Promise<boolean>} True if the store is valid\n * @throws {Fatal} If the store can't be found in the organization or we fail to make it a test store\n */\nexport async function convertToTestStoreIfNeeded(\n  storeDomain: string,\n  stores: OrganizationStore[],\n  org: Organization,\n  token: string,\n): Promise<void> {\n  const store = stores.find((store) => store.shopDomain === storeDomain)\n  if (!store) throw StoreNotFoundError(storeDomain, org)\n  if (!store.transferDisabled && !store.convertableToPartnerTest) throw InvalidStore(store.shopDomain)\n  if (!store.transferDisabled) await convertStoreToTest(store, org.id, token)\n}\n\n/**\n * Convert a store to a test store so development apps can be installed\n * This can't be undone, so we ask the user to confirm\n * @param store {OrganizationStore} Store to convert\n * @param orgId {string} Current organization ID\n * @param token {string} Token to access partners API\n */\nexport async function convertStoreToTest(store: OrganizationStore, orgId: string, token: string) {\n  const query = api.graphql.ConvertDevToTestStoreQuery\n  const variables: api.graphql.ConvertDevToTestStoreVariables = {\n    input: {\n      organizationID: parseInt(orgId, 10),\n      shopId: store.shopId,\n    },\n  }\n  const result: api.graphql.ConvertDevToTestStoreSchema = await api.partners.request(query, token, variables)\n  if (!result.convertDevToTestStore.convertedToTestStore) {\n    const errors = result.convertDevToTestStore.userErrors.map((error) => error.message).join(', ')\n    throw ConvertToDevError(store.shopDomain, errors)\n  }\n  output.success(`Converted ${store.shopDomain} to a Test store`)\n}\n","import {ExtensionRegistration} from '../dev/create-extension'\nimport {Extension, IdentifiersExtensions} from 'cli/models/app/app'\n\nexport type MatchResult =\n  | {\n      result: 'ok'\n      identifiers: IdentifiersExtensions\n      pendingConfirmation: {extension: Extension; registration: ExtensionRegistration}[]\n      toCreate: Extension[]\n      toManualMatch: {local: Extension[]; remote: ExtensionRegistration[]}\n    }\n  | {\n      result: 'invalid-environment'\n    }\n\nexport async function automaticMatchmaking(\n  localExtensions: Extension[],\n  remoteRegistrations: ExtensionRegistration[],\n  identifiers: {[localIdentifier: string]: string},\n): Promise<MatchResult> {\n  if (remoteRegistrations.length > localExtensions.length) {\n    return {result: 'invalid-environment'}\n  }\n\n  const validIdentifiers = identifiers\n\n  // Get the local UUID of an extension, if exists\n  const localId = (extension: Extension) => validIdentifiers[extension.localIdentifier]\n\n  // All local UUIDs available\n  const localUUIDs = () => Object.values(validIdentifiers)\n\n  // Whether an extension has an UUID and that UUID and type match with a remote extension\n  const existsRemotely = (extension: Extension) => {\n    const remote = remoteRegistrations.find((registration) => registration.uuid === localId(extension))\n    return remote !== undefined && remote.type === extension.graphQLType\n  }\n\n  // List of local extensions that don't exists remotely and need to be matched\n  const pendingLocal = localExtensions.filter((extension) => !existsRemotely(extension))\n\n  // List of remote extensions that are not yet matched to a local extension\n  const pendingRemote = remoteRegistrations.filter((registration) => !localUUIDs().includes(registration.uuid))\n\n  // From pending to be matched remote extensions, this is the list of remote extensions with duplicated Type\n  // If two or more extensions have the same type, we need to manually match them.\n  const remoteNeedsManualMatch = (() => {\n    const types = pendingRemote.map((ext) => ext.type).filter((type, i, array) => array.indexOf(type) !== i)\n    return pendingRemote.filter((ext) => types.includes(ext.type))\n  })()\n\n  // From pending to be matched extensions, this is the list of extensions with duplicated Type\n  // If two or more extensions have the same type, we need to manually match them.\n  const localNeedsManualMatch = (() => {\n    const types = pendingLocal.map((ext) => ext.graphQLType).filter((type, i, array) => array.indexOf(type) !== i)\n    // If local extensions with duplicated types do not have a possible remote match, they don't require manual match\n    const manualTypes = types.filter((type) => remoteNeedsManualMatch.some((reg) => reg.type === type))\n    return pendingLocal.filter((ext) => manualTypes.includes(ext.graphQLType))\n  })()\n\n  // Extensions that should be possible to automatically match or create, should not contain duplicated types\n  const newLocalPending = pendingLocal.filter((extension) => !localNeedsManualMatch.includes(extension))\n  const newRemotePending = pendingRemote.filter((registration) => !remoteNeedsManualMatch.includes(registration))\n\n  // If there are remote pending with types not present locally, we can't automatically match\n  // The user must solve the issue in their environment or deploy to a different app\n  const impossible = newRemotePending.filter((reg) => !newLocalPending.map((ext) => ext.graphQLType).includes(reg.type))\n  if (impossible.length > 0 || newRemotePending.length > newLocalPending.length) {\n    return {result: 'invalid-environment'}\n  }\n\n  // If there are more remote pending than local in total, then we can't automatically match\n  // The user must solve the issue in their environment or deploy to a different app\n  if (newRemotePending.length > newLocalPending.length) {\n    return {result: 'invalid-environment'}\n  }\n\n  const extensionsToCreate: Extension[] = []\n  const pendingConfirmation: {extension: Extension; registration: ExtensionRegistration}[] = []\n\n  // For each pending local extension, evaluate if it can be automatically matched or needs to be created\n  newLocalPending.forEach((extension) => {\n    // Remote extensions that have the same type as the local one\n    const possibleMatches = newRemotePending.filter((req) => req.type === extension.graphQLType)\n\n    if (possibleMatches.length === 0) {\n      // There are no remote extensions with the same type. We need to create a new extension\n      extensionsToCreate.push(extension)\n    } else if (possibleMatches[0].title.toLowerCase() === extension.localIdentifier.toLowerCase()) {\n      // There is a unique remote extension with the same type AND name. We can automatically match them.\n      validIdentifiers[extension.localIdentifier] = possibleMatches[0].uuid\n    } else {\n      // There is a unique remote extension with the same type, but different name. We can match them but need to confirm\n      pendingConfirmation.push({extension, registration: possibleMatches[0]})\n    }\n  })\n\n  // At this point, all extensions are matched either automatically, manually or are new\n  return {\n    result: 'ok',\n    identifiers: validIdentifiers,\n    pendingConfirmation,\n    toCreate: extensionsToCreate,\n    toManualMatch: {local: localNeedsManualMatch, remote: remoteNeedsManualMatch},\n  }\n}\n","import {ExtensionRegistration} from '../dev/create-extension'\nimport {Extension, IdentifiersExtensions} from 'cli/models/app/app'\nimport {ui} from '@shopify/cli-kit'\n\nexport type ManualMatchResult =\n  | {\n      result: 'ok'\n      identifiers: IdentifiersExtensions\n      toCreate: Extension[]\n    }\n  | {result: 'pending-remote'}\n\n/**\n * Prompt the user to manually match each of the local extensions to a remote extension.\n * The user can also select to create a new remote extension instead of selecting an existing one.\n * Manual matching will only show extensions of the same type as possible matches.\n * At the end of this process, all remote extensions must be matched to suceed.\n * @param localExtensions {Extension[]} The local extensions to match\n * @param remoteExtensions {ExtensionRegistration[]} The remote extensions to match\n * @returns {Promise<ManualMatchResult>} The result of the manual matching\n */\nexport async function manualMatchIds(\n  localExtensions: Extension[],\n  remoteExtensions: ExtensionRegistration[],\n): Promise<ManualMatchResult> {\n  const identifiers: {[key: string]: string} = {}\n  let pendingRemote = remoteExtensions\n  let pendingLocal = localExtensions\n  for (const extension of localExtensions) {\n    const registrationsForType = pendingRemote.filter((reg) => reg.type === extension.graphQLType)\n    if (registrationsForType.length === 0) continue\n    // eslint-disable-next-line no-await-in-loop\n    const selected = await selectRegistrationPrompt(extension, registrationsForType)\n    if (!selected) continue\n\n    identifiers[extension.localIdentifier] = selected.uuid\n    pendingRemote = pendingRemote.filter((reg) => reg.uuid !== selected.uuid)\n    pendingLocal = pendingLocal.filter((reg) => reg.localIdentifier !== extension.localIdentifier)\n  }\n\n  if (pendingRemote.length > 0) return {result: 'pending-remote'}\n  return {result: 'ok', identifiers, toCreate: pendingLocal}\n}\n\nexport async function selectRegistrationPrompt(\n  extension: Extension,\n  registrations: ExtensionRegistration[],\n): Promise<ExtensionRegistration> {\n  const registrationList = registrations.map((reg) => ({\n    name: `Match it to ${reg.title} (ID: ${reg.id} on Shopify Partners)`,\n    value: reg.uuid,\n  }))\n  registrationList.push({name: 'Create new extension', value: 'create'})\n  const choice: {uuid: string} = await ui.prompt([\n    {\n      type: 'autocomplete',\n      name: 'uuid',\n      message: `How would you like to deploy your \"${extension.localIdentifier}\"?`,\n      choices: registrationList,\n    },\n  ])\n  return registrations.find((reg) => reg.uuid === choice.uuid)!\n}\n","import {extensionGraphqlId} from '../../models/app/app'\nimport {ExtensionTypes} from '../../constants'\nimport {api, error} from '@shopify/cli-kit'\n\nexport interface ExtensionRegistration {\n  id: string\n  uuid: string\n  type: string\n  title: string\n  draftVersion?: {\n    registrationId: string\n    lastUserInteractionAt: string\n    validationErrors: {\n      field: string[]\n      message: string\n    }[]\n  }\n}\n\nexport async function createExtension(\n  apiKey: string,\n  type: ExtensionTypes,\n  name: string,\n  token: string,\n): Promise<ExtensionRegistration> {\n  const query = api.graphql.ExtensionCreateQuery\n  const variables: api.graphql.ExtensionCreateVariables = {\n    apiKey,\n    type: extensionGraphqlId(type),\n    title: name,\n    config: JSON.stringify({}),\n    context: null,\n  }\n  const result: api.graphql.ExtensionCreateSchema = await api.partners.request(query, token, variables)\n\n  if (result.extensionCreate.userErrors?.length > 0) {\n    const errors = result.extensionCreate.userErrors.map((error) => error.message).join(', ')\n    throw new error.Abort(errors)\n  }\n\n  return result.extensionCreate.extensionRegistration\n}\n","import {automaticMatchmaking} from './id-matching'\nimport {manualMatchIds} from './id-manual-matching'\nimport {App, Extension, Identifiers} from '../../models/app/app'\nimport {fetchAppExtensionRegistrations} from '../dev/fetch'\nimport {createExtension} from '../dev/create-extension'\nimport {dependency, error, output, session, ui} from '@shopify/cli-kit'\n\nconst DeployError = (appName: string, packageManager: dependency.DependencyManager) => {\n  return new error.Abort(\n    `Deployment failed because this local project doesn't seem to match the app \"${appName}\" in Shopify Partners.`,\n    `â€¢ If you didn't intend to select this app, run ${\n      output.content`${output.token.packagejsonScript(packageManager, 'deploy', '--reset')}`.value\n    }\nâ€¢ If this is the app you intended, check your local project and make sure\n  it contains the same number and types of extensions as the Shopify app\n  you've selected. You may need to scaffold missing extensions.`,\n  )\n}\n\nexport interface EnsureDeploymentIdsPresenceOptions {\n  app: App\n  token: string\n  appId: string\n  appName: string\n  envIdentifiers: Partial<Identifiers>\n}\n\ninterface ExtensionRegistration {\n  uuid: string\n  type: string\n  id: string\n  title: string\n}\n\nexport async function ensureDeploymentIdsPresence(options: EnsureDeploymentIdsPresenceOptions): Promise<Identifiers> {\n  // All initial values both remote and local\n  const remoteSpecifications = await fetchAppExtensionRegistrations({token: options.token, apiKey: options.appId})\n  const remoteRegistrations: ExtensionRegistration[] = remoteSpecifications.app.extensionRegistrations\n  const validIdentifiers = options.envIdentifiers.extensions ?? {}\n  const functionLocalIdentifiers = Object.fromEntries(\n    options.app.extensions.function\n      .map((extension) => extension.localIdentifier)\n      .map((extensionIdentifier) => {\n        return validIdentifiers[extensionIdentifier]\n          ? [extensionIdentifier, validIdentifiers[extensionIdentifier]]\n          : undefined\n      })\n      .filter((entry) => entry !== undefined) as string[][],\n  )\n  const localExtensions: Extension[] = [...options.app.extensions.ui, ...options.app.extensions.theme]\n\n  const GenericError = () => DeployError(options.appName, options.app.dependencyManager)\n\n  // We need local extensions to deploy\n  if (localExtensions.length === 0) {\n    return {\n      app: options.appId,\n      extensions: {...functionLocalIdentifiers},\n      // Numeric extension IDs aren't relevant for functions\n      extensionIds: {},\n    }\n  }\n\n  // If there are more remote extensions than local, then something is missing and we can't continue\n  if (remoteRegistrations.length > localExtensions.length) {\n    throw GenericError()\n  }\n\n  const match = await automaticMatchmaking(localExtensions, remoteRegistrations, validIdentifiers)\n\n  if (match.result === 'invalid-environment') {\n    throw GenericError()\n  }\n  let validMatches = match.identifiers ?? {}\n  const validMatchesById: {[key: string]: string} = {}\n\n  if (match.pendingConfirmation.length > 0) {\n    for (const pending of match.pendingConfirmation) {\n      // eslint-disable-next-line no-await-in-loop\n      const confirmed = await matchConfirmationPrompt(pending.extension, pending.registration)\n      if (!confirmed) throw new error.AbortSilent()\n      validMatches[pending.extension.localIdentifier] = pending.registration.uuid\n    }\n  }\n\n  const extensionsToCreate = match.toCreate ?? []\n\n  if (match.toManualMatch.local.length > 0) {\n    const matchResult = await manualMatchIds(match.toManualMatch.local, match.toManualMatch.remote)\n    if (matchResult.result === 'pending-remote') throw GenericError()\n    validMatches = {...validMatches, ...matchResult.identifiers}\n    extensionsToCreate.push(...matchResult.toCreate)\n  }\n\n  if (extensionsToCreate.length > 0) {\n    const newIdentifiers = await createExtensions(extensionsToCreate, options.appId)\n    for (const [localIdentifier, registration] of Object.entries(newIdentifiers)) {\n      validMatches[localIdentifier] = registration.uuid\n      validMatchesById[localIdentifier] = registration.id\n    }\n  }\n\n  for (const [localIdentifier, uuid] of Object.entries(validMatches)) {\n    const registration = remoteRegistrations.find((registration) => registration.uuid === uuid)\n    if (registration) validMatchesById[localIdentifier] = registration.id\n  }\n\n  return {\n    app: options.appId,\n    extensions: {...validMatches, ...functionLocalIdentifiers},\n    extensionIds: validMatchesById,\n  }\n}\n\nasync function createExtensions(extensions: Extension[], appId: string) {\n  // PENDING: Function extensions can't be created before being deployed we'll need to handle that differently\n  const token = await session.ensureAuthenticatedPartners()\n  const result: {[localIdentifier: string]: ExtensionRegistration} = {}\n  for (const extension of extensions) {\n    // eslint-disable-next-line no-await-in-loop\n    const registration = await createExtension(appId, extension.type, extension.localIdentifier, token)\n    output.completed(`Created extension ${extension.localIdentifier}.`)\n    result[extension.localIdentifier] = registration\n  }\n  return result\n}\n\nasync function matchConfirmationPrompt(extension: Extension, registration: ExtensionRegistration) {\n  const choices = [\n    {name: `Yes, that's right`, value: 'yes'},\n    {name: `No, cancel deployment`, value: 'no'},\n  ]\n  const choice: {value: string} = await ui.prompt([\n    {\n      type: 'select',\n      name: 'value',\n      message: `Deploy ${extension.localIdentifier} (local name) as ${registration.title} (name on Shopify Partners, ID: ${registration.id})?`,\n      choices,\n    },\n  ])\n  return choice.value === 'yes'\n}\n","import {selectOrCreateApp} from './dev/select-app'\nimport {\n  fetchAllStores,\n  fetchAppFromApiKey,\n  fetchOrgAndApps,\n  fetchOrganizations,\n  fetchOrgFromId,\n  FetchResponse,\n} from './dev/fetch'\nimport {selectStore, convertToTestStoreIfNeeded} from './dev/select-store'\nimport {ensureDeploymentIdsPresence} from './environment/identifiers'\nimport {reuseDevConfigPrompt, selectOrganizationPrompt} from '../prompts/dev'\nimport {App, Identifiers, UuidOnlyIdentifiers, updateAppIdentifiers, getAppIdentifiers} from '../models/app/app'\nimport {Organization, OrganizationApp, OrganizationStore} from '../models/organization'\nimport {error as kitError, output, session, store as conf, ui, environment, dependency} from '@shopify/cli-kit'\n\nexport const InvalidApiKeyError = (apiKey: string) => {\n  return new kitError.Abort(\n    output.content`Invalid API key: ${apiKey}`,\n    output.content`You can find the API key in the app settings in the Partner Dashboard.`,\n  )\n}\n\nexport const DeployAppNotFound = (apiKey: string, dependencyManager: dependency.DependencyManager) => {\n  return new kitError.Abort(\n    output.content`Couldn't find the app with API key ${apiKey}`,\n    output.content`â€¢ If you didn't intend to select this app, run ${\n      output.content`${output.token.packagejsonScript(dependencyManager, 'deploy', '--reset')}`.value\n    }`,\n  )\n}\n\nexport const AppOrganizationNotFoundError = (apiKey: string, organizations: string[]) => {\n  return new kitError.Abort(\n    `The application with API Key ${apiKey} doesn't belong to any of your organizations: ${organizations.join(', ')}`,\n  )\n}\n\nexport interface DevEnvironmentOptions {\n  app: App\n  apiKey?: string\n  storeFqdn?: string\n  reset: boolean\n}\n\ninterface DevEnvironmentOutput {\n  app: Omit<OrganizationApp, 'apiSecretKeys' | 'apiKey'> & {apiSecret?: string}\n  storeFqdn: string\n  identifiers: UuidOnlyIdentifiers\n}\n\n/**\n * Make sure there is a valid environment to execute `dev`\n * That means we have a valid organization, app and dev store selected.\n *\n * If there are app/store from flags, we check if they are valid. If they are not, throw an error.\n * If there is cached info (user ran `dev` previously), check if it is still valid and return it.\n * If there is no cached info (or is invalid):\n *  - Show prompts to select an org, app and dev store\n *  - The new selection will be saved as global configuration\n *  - The `shopify.app.toml` file will be updated with the new app apiKey\n *\n * @param options {DevEnvironmentInput} Current dev environment options\n * @returns {Promise<DevEnvironmentOutput>} The selected org, app and dev store\n */\nexport async function ensureDevEnvironment(options: DevEnvironmentOptions): Promise<DevEnvironmentOutput> {\n  const token = await session.ensureAuthenticatedPartners()\n\n  // We retrieve the production identifiers to know if the user has selected the prod app for `dev`\n  const prodEnvIdentifiers = await getAppIdentifiers({app: options.app})\n  const envExtensionsIds = prodEnvIdentifiers.extensions || {}\n\n  const cachedInfo = getAppDevCachedInfo({\n    reset: options.reset,\n    directory: options.app.directory,\n    apiKey: options.apiKey ?? conf.getAppInfo(options.app.directory)?.appId,\n  })\n\n  const explanation =\n    `\\nLooks like this is the first time you're running dev for this project.\\n` +\n    'Configure your preferences by answering a few questions.\\n'\n\n  if (cachedInfo === undefined && !options.reset) {\n    output.info(explanation)\n  }\n\n  const orgId = cachedInfo?.orgId || (await selectOrg(token))\n  const {organization, apps, stores} = await fetchOrgsAppsAndStores(orgId, token)\n\n  let {app: selectedApp, store: selectedStore} = await fetchDevDataFromOptions(options, organization, stores, token)\n  if (selectedApp && selectedStore) {\n    // eslint-disable-next-line no-param-reassign\n    options = await updateDevOptions({...options, apiKey: selectedApp.apiKey})\n\n    conf.setAppInfo({appId: selectedApp.apiKey, directory: options.app.directory, storeFqdn: selectedStore, orgId})\n\n    // If the selected app is the \"prod\" one, we will use the real extension IDs for `dev`\n    const extensions = prodEnvIdentifiers.app === selectedApp.apiKey ? envExtensionsIds : {}\n    return {\n      app: {\n        ...selectedApp,\n        apiSecret: selectedApp.apiSecretKeys.length === 0 ? undefined : selectedApp.apiSecretKeys[0].secret,\n      },\n      storeFqdn: selectedStore,\n      identifiers: {\n        app: selectedApp.apiKey,\n        extensions,\n      },\n    }\n  }\n\n  selectedApp = selectedApp || (await selectOrCreateApp(options.app, apps, organization, token, cachedInfo?.appId))\n  conf.setAppInfo({appId: selectedApp.apiKey, title: selectedApp.title, directory: options.app.directory, orgId})\n\n  // eslint-disable-next-line no-param-reassign\n  options = await updateDevOptions({...options, apiKey: selectedApp.apiKey})\n  selectedStore = selectedStore || (await selectStore(stores, organization, token, cachedInfo?.storeFqdn))\n  conf.setAppInfo({appId: selectedApp.apiKey, directory: options.app.directory, storeFqdn: selectedStore})\n\n  if (selectedApp.apiKey === cachedInfo?.appId && selectedStore === cachedInfo.storeFqdn) {\n    showReusedValues(organization.businessName, options.app, selectedStore)\n  }\n\n  // If the selected app is the \"prod\" one, we will use the real extension IDs for `dev`\n  const extensions = prodEnvIdentifiers.app === selectedApp.apiKey ? envExtensionsIds : {}\n  return {\n    app: {\n      ...selectedApp,\n      apiSecret: selectedApp.apiSecretKeys.length === 0 ? undefined : selectedApp.apiSecretKeys[0].secret,\n    },\n    storeFqdn: selectedStore,\n    identifiers: {\n      app: selectedApp.apiKey,\n      extensions,\n    },\n  }\n}\n\nasync function updateDevOptions(options: DevEnvironmentOptions & {apiKey: string}) {\n  const updatedApp = await updateAppIdentifiers({\n    app: options.app,\n    identifiers: {\n      app: options.apiKey,\n      extensions: {},\n    },\n    command: 'dev',\n  })\n  return {\n    ...options,\n    app: updatedApp,\n  }\n}\n\nexport interface DeployEnvironmentOptions {\n  app: App\n  reset: boolean\n}\n\ninterface DeployEnvironmentOutput {\n  app: App\n  token: string\n  partnersOrganizationId: string\n  partnersApp: Omit<OrganizationApp, 'apiSecretKeys' | 'apiKey'>\n  identifiers: Identifiers\n}\n\n/**\n * If there is a cached ApiKey used for dev, retrieve that and ask the user if they want to reuse it\n * @param app {App} The local app object\n * @param token {string} The token to use to access the Partners API\n * @returns {Promise<OrganizationApp | undefined>}\n * OrganizationApp if a cached value is valid.\n * undefined if there is no cached value or the user doesn't want to use it.\n */\nasync function fetchDevAppAndPrompt(app: App, token: string): Promise<OrganizationApp | undefined> {\n  const devAppId = conf.getAppInfo(app.directory)?.appId\n  if (!devAppId) return undefined\n\n  const partnersResponse = await fetchAppFromApiKey(devAppId, token)\n  if (!partnersResponse) return undefined\n\n  const org: Organization | undefined = await fetchOrgFromId(partnersResponse.organizationId, token)\n\n  showDevValues(org?.businessName ?? 'unknown', partnersResponse.title)\n  const reuse = await reuseDevConfigPrompt()\n  return reuse ? partnersResponse : undefined\n}\n\nexport async function ensureDeployEnvironment(options: DeployEnvironmentOptions): Promise<DeployEnvironmentOutput> {\n  const token = await session.ensureAuthenticatedPartners()\n  let envIdentifiers = await getAppIdentifiers({app: options.app})\n\n  let partnersApp: OrganizationApp | undefined\n\n  if (options.reset) {\n    envIdentifiers = {app: undefined, extensions: {}}\n  } else if (envIdentifiers.app) {\n    partnersApp = await fetchAppFromApiKey(envIdentifiers.app, token)\n    if (!partnersApp) throw DeployAppNotFound(envIdentifiers.app, options.app.dependencyManager)\n  } else {\n    partnersApp = await fetchDevAppAndPrompt(options.app, token)\n  }\n\n  let identifiers: Identifiers = envIdentifiers as Identifiers\n\n  if (!partnersApp) {\n    const result = await fetchOrganizationAndFetchOrCreateApp(options.app, token)\n    partnersApp = result.partnersApp\n  }\n\n  identifiers = await ensureDeploymentIdsPresence({\n    app: options.app,\n    appId: partnersApp.apiKey,\n    appName: partnersApp.title,\n    token,\n    envIdentifiers,\n  })\n\n  // eslint-disable-next-line no-param-reassign\n  options = {\n    ...options,\n    app: await updateAppIdentifiers({app: options.app, identifiers, command: 'deploy'}),\n  }\n  return {\n    app: options.app,\n    partnersApp: {\n      id: partnersApp.id,\n      title: partnersApp.title,\n      appType: partnersApp.appType,\n      organizationId: partnersApp.organizationId,\n    },\n    partnersOrganizationId: partnersApp.organizationId,\n    identifiers,\n    token,\n  }\n}\n\nexport async function fetchOrganizationAndFetchOrCreateApp(\n  app: App,\n  token: string,\n): Promise<{partnersApp: OrganizationApp; orgId: string}> {\n  const orgId = await selectOrg(token)\n  const {organization, apps} = await fetchOrgsAppsAndStores(orgId, token)\n  const partnersApp = await selectOrCreateApp(app, apps, organization, token, undefined)\n  return {orgId, partnersApp}\n}\n\nasync function fetchOrgsAppsAndStores(orgId: string, token: string): Promise<FetchResponse> {\n  let data = {} as FetchResponse\n  const list = new ui.Listr(\n    [\n      {\n        title: 'Fetching organization data',\n        task: async () => {\n          const organizationAndApps = await fetchOrgAndApps(orgId, token)\n          const stores = await fetchAllStores(orgId, token)\n          data = {...organizationAndApps, stores} as FetchResponse\n          // We need ALL stores so we can validate the selected one.\n          // This is a temporary workaround until we have an endpoint to fetch only 1 store to validate.\n        },\n      },\n    ],\n    {rendererSilent: environment.local.isUnitTest()},\n  )\n  await list.run()\n  return data\n}\n\n/**\n * Any data sent via input flags takes precedence and needs to be validated.\n * If any of the inputs is invalid, we must throw an error and stop the execution.\n * @param input\n * @returns\n */\nasync function fetchDevDataFromOptions(\n  options: DevEnvironmentOptions,\n  org: Organization,\n  stores: OrganizationStore[],\n  token: string,\n): Promise<{app?: OrganizationApp; store?: string}> {\n  let selectedApp: OrganizationApp | undefined\n  let selectedStore: string | undefined\n\n  if (options.apiKey) {\n    selectedApp = await fetchAppFromApiKey(options.apiKey, token)\n    if (!selectedApp) throw InvalidApiKeyError(options.apiKey)\n  }\n\n  if (options.storeFqdn) {\n    await convertToTestStoreIfNeeded(options.storeFqdn, stores, org, token)\n    selectedStore = options.storeFqdn\n  }\n\n  return {app: selectedApp, store: selectedStore}\n}\n\n/**\n * Retrieve cached info from the global configuration based on the current local app\n * @param reset {boolean} Wheter to reset the cache or not\n * @param directory {string} The directory containing the app.\n * @param appId {string} Current local app id, used to retrieve the cached info\n * @returns\n */\nfunction getAppDevCachedInfo({\n  reset,\n  directory,\n  apiKey,\n}: {\n  reset: boolean\n  directory: string\n  apiKey?: string\n}): conf.CachedAppInfo | undefined {\n  if (!apiKey) return undefined\n  if (apiKey && reset) conf.clearAppInfo(directory)\n  return conf.getAppInfo(directory)\n}\n\n/**\n * Fetch all orgs the user belongs to and show a prompt to select one of them\n * @param token {string} Token to access partners API\n * @returns {Promise<string>} The selected organization ID\n */\nasync function selectOrg(token: string): Promise<string> {\n  const orgs = await fetchOrganizations(token)\n  const org = await selectOrganizationPrompt(orgs)\n  return org.id\n}\n\n/**\n * Message shown to the user in case we are reusing a previous configuration\n * @param org {string} Organization name\n * @param app {string} App name\n * @param store {string} Store domain\n */\nfunction showReusedValues(org: string, app: App, store: string) {\n  output.info('\\nUsing your previous dev settings:')\n  output.info(`Org:        ${org}`)\n  output.info(`App:        ${app.name}`)\n  output.info(`Dev store:  ${store}\\n`)\n  output.info(\n    output.content`To reset your default dev config, run ${output.token.packagejsonScript(\n      app.dependencyManager,\n      'dev',\n      '--reset',\n    )}\\n`,\n  )\n}\n\n/**\n * Message shown to the user in case we are reusing a previous configuration\n * @param org {string} Organization name\n * @param app {string} App name\n * @param store {string} Store domain\n */\nfunction showDevValues(org: string, appName: string) {\n  output.info('\\nYour configs for dev were:')\n  output.info(`Org:        ${org}`)\n  output.info(`App:        ${appName}\\n`)\n}\n"],"names":["kitError","conf"],"mappings":"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"}