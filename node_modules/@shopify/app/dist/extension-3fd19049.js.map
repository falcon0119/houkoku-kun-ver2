{"version":3,"file":"extension-3fd19049.js","sources":["../src/cli/services/build/extension.ts"],"sourcesContent":["import {runGoExtensionsCLI} from '../../utilities/extensions/cli'\nimport {App, UIExtension, FunctionExtension, ThemeExtension} from '../../models/app/app'\nimport {extensionConfig} from '../../utilities/extensions/configuration'\nimport {error, ruby, system, yaml, output} from '@shopify/cli-kit'\nimport {Writable} from 'node:stream'\n\nexport interface ExtensionBuildOptions {\n  /**\n   * Standard output stream to send the output through.\n   */\n  stdout: Writable\n  /**\n   * Standard error stream to send the error output through.\n   */\n  stderr: Writable\n\n  /**\n   * Signal to abort the build process.\n   */\n  signal: error.AbortSignal\n\n  /**\n   * Overrides the default build directory.\n   */\n  buildDirectory?: string\n\n  /**\n   * The app that contains the extensions.\n   */\n  app: App\n}\n\nexport interface ThemeExtensionBuildOptions extends ExtensionBuildOptions {\n  /**\n   * The UI extensions to be built.\n   */\n  extensions: ThemeExtension[]\n}\n\n/**\n * It builds the theme extensions.\n * @param options {ThemeExtensionBuildOptions} Build options.\n */\nexport async function buildThemeExtensions(options: ThemeExtensionBuildOptions): Promise<void> {\n  if (options.extensions.length === 0) return\n  options.stdout.write(`Building theme extensions...`)\n  const themeDirectories = options.extensions.map((extension) => extension.directory)\n  await ruby.execThemeCheckCLI({\n    directories: themeDirectories,\n    args: ['-C', ':theme_app_extension'],\n    stdout: options.stdout,\n    stderr: options.stderr,\n  })\n}\n\nexport interface UiExtensionBuildOptions extends ExtensionBuildOptions {\n  /**\n   * The UI extensions to be built.\n   */\n  extensions: UIExtension[]\n}\n\n/**\n * It builds the UI extensions.\n * @param options {UiExtensionBuildOptions} Build options.\n */\nexport async function buildUIExtensions(options: UiExtensionBuildOptions): Promise<void> {\n  if (options.extensions.length === 0) {\n    return\n  }\n  options.stdout.write(`Building UI extensions...`)\n  const fullOptions = {...options, extensions: options.extensions, includeResourceURL: false}\n  const configuration = await extensionConfig(fullOptions)\n  output.debug(output.content`Dev'ing extension with configuration:\n${output.token.json(configuration)}\n`)\n  const stdin = yaml.encode(configuration)\n  await runGoExtensionsCLI(['build', '-'], {\n    cwd: options.app.directory,\n    stdout: options.stdout,\n    stderr: options.stderr,\n    stdin,\n  })\n}\n\nexport interface BuildFunctionExtensionOptions extends ExtensionBuildOptions {}\n\n/**\n * Builds a function extension\n * @param extension {FunctionExtension} The function extension to build.\n * @param options {BuildFunctionExtensionOptions} Options to configure the build of the extension.\n */\nexport async function buildFunctionExtension(\n  extension: FunctionExtension,\n  options: BuildFunctionExtensionOptions,\n): Promise<void> {\n  const buildCommand = extension.configuration.build?.command\n  if (!buildCommand || buildCommand.trim() === '') {\n    options.stderr.write(\n      `The function extension ${extension.localIdentifier} doesn't have a build command or it's empty`,\n    )\n    options.stderr.write(`\n    Edit the shopify.function.extension.toml configuration file and set how to build the extension.\n\n    [build]\n    command = \"{COMMAND}\"\n\n    Note that the command must output a dist/index.wasm file.\n    `)\n    throw new error.AbortSilent()\n  }\n  const buildCommandComponents = buildCommand.split(' ')\n  options.stdout.write(`Building function ${extension.localIdentifier}...`)\n  await system.exec(buildCommandComponents[0], buildCommandComponents.slice(1), {\n    stdout: options.stdout,\n    stderr: options.stderr,\n    cwd: extension.directory,\n    signal: options.signal,\n  })\n}\n"],"names":[],"mappings":";;;;AA2CA,eAAA,oBAAA,CAA2C,OAAoD,EAAA;AAC7F,EAAI,IAAA,OAAA,CAAQ,WAAW,MAAW,KAAA,CAAA;AAAG,IAAA,OAAA;AACrC,EAAQ,OAAA,CAAA,MAAA,CAAO,MAAM,CAA8B,4BAAA,CAAA,CAAA,CAAA;AACnD,EAAA,MAAM,mBAAmB,OAAQ,CAAA,UAAA,CAAW,IAAI,CAAC,SAAA,KAAc,UAAU,SAAS,CAAA,CAAA;AAClF,EAAA,MAAM,KAAK,iBAAkB,CAAA;AAAA,IAC3B,WAAa,EAAA,gBAAA;AAAA,IACb,IAAA,EAAM,CAAC,IAAA,EAAM,sBAAsB,CAAA;AAAA,IACnC,QAAQ,OAAQ,CAAA,MAAA;AAAA,IAChB,QAAQ,OAAQ,CAAA,MAAA;AAAA,GACjB,CAAA,CAAA;AACH,CAAA;AAaA,eAAA,iBAAA,CAAwC,OAAiD,EAAA;AACvF,EAAI,IAAA,OAAA,CAAQ,UAAW,CAAA,MAAA,KAAW,CAAG,EAAA;AACnC,IAAA,OAAA;AAAA,GACF;AACA,EAAQ,OAAA,CAAA,MAAA,CAAO,MAAM,CAA2B,yBAAA,CAAA,CAAA,CAAA;AAChD,EAAM,MAAA,WAAA,GAAc,EAAC,GAAG,OAAA,EAAS,YAAY,OAAQ,CAAA,UAAA,EAAY,oBAAoB,KAAK,EAAA,CAAA;AAC1F,EAAM,MAAA,aAAA,GAAgB,MAAM,eAAA,CAAgB,WAAW,CAAA,CAAA;AACvD,EAAA,MAAA,CAAO,MAAM,MAAO,CAAA,OAAA,CAAA;AAAA,EACpB,MAAA,CAAO,KAAM,CAAA,IAAA,CAAK,aAAa,CAAA,CAAA;AAAA,CAChC,CAAA,CAAA;AACC,EAAM,MAAA,KAAA,GAAQ,IAAK,CAAA,MAAA,CAAO,aAAa,CAAA,CAAA;AACvC,EAAA,MAAM,kBAAmB,CAAA,CAAC,OAAS,EAAA,GAAG,CAAG,EAAA;AAAA,IACvC,GAAA,EAAK,QAAQ,GAAI,CAAA,SAAA;AAAA,IACjB,QAAQ,OAAQ,CAAA,MAAA;AAAA,IAChB,QAAQ,OAAQ,CAAA,MAAA;AAAA,IAChB,KAAA;AAAA,GACD,CAAA,CAAA;AACH,CAAA;AASA,eAAA,sBAAA,CACE,WACA,OACe,EAAA;AACf,EAAM,MAAA,YAAA,GAAe,SAAU,CAAA,aAAA,CAAc,KAAO,EAAA,OAAA,CAAA;AACpD,EAAA,IAAI,CAAC,YAAA,IAAgB,YAAa,CAAA,IAAA,OAAW,EAAI,EAAA;AAC/C,IAAA,OAAA,CAAQ,MAAO,CAAA,KAAA,CACb,CAA0B,uBAAA,EAAA,SAAA,CAAU,eACtC,CAAA,2CAAA,CAAA,CAAA,CAAA;AACA,IAAA,OAAA,CAAQ,OAAO,KAAM,CAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOpB,CAAA,CAAA,CAAA;AACD,IAAM,MAAA,IAAI,MAAM,WAAY,EAAA,CAAA;AAAA,GAC9B;AACA,EAAM,MAAA,sBAAA,GAAyB,YAAa,CAAA,KAAA,CAAM,GAAG,CAAA,CAAA;AACrD,EAAA,OAAA,CAAQ,MAAO,CAAA,KAAA,CAAM,CAAqB,kBAAA,EAAA,SAAA,CAAU,eAAoB,CAAA,GAAA,CAAA,CAAA,CAAA;AACxE,EAAA,MAAM,OAAO,IAAK,CAAA,sBAAA,CAAuB,IAAI,sBAAuB,CAAA,KAAA,CAAM,CAAC,CAAG,EAAA;AAAA,IAC5E,QAAQ,OAAQ,CAAA,MAAA;AAAA,IAChB,QAAQ,OAAQ,CAAA,MAAA;AAAA,IAChB,KAAK,SAAU,CAAA,SAAA;AAAA,IACf,QAAQ,OAAQ,CAAA,MAAA;AAAA,GACjB,CAAA,CAAA;AACH;;;;"}