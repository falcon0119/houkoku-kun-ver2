{"version":3,"file":"extension.js","sources":["../../../../src/cli/utilities/extensions/template-configuration.ts","../../../../src/cli/prompts/scaffold/extension.ts","../../../../src/cli/services/scaffold/extension.ts","../../../../src/cli/commands/app/scaffold/extension.ts"],"sourcesContent":["import {isUiExtensionType, uiExtensionTemplates} from '../../constants'\n\nexport function getUIExtensionTemplates(extensionType: string): {name: string; value: string}[] {\n  const filteredFlavors: string[] = []\n  if (extensionType === 'web_pixel_extension') {\n    filteredFlavors.push('react')\n  }\n  return uiExtensionTemplates.filter((template) => !filteredFlavors.includes(template.value))\n}\n\nexport function isValidUIExtensionTemplate(extensionType: string, uiExtensionTemplateValue?: string): boolean {\n  return (\n    isUiExtensionType(extensionType) &&\n    Boolean(\n      getUIExtensionTemplates(extensionType).find(\n        (extensionTemplate) => extensionTemplate.value === uiExtensionTemplateValue,\n      ),\n    )\n  )\n}\n","import {\n  extensions,\n  ExtensionTypes,\n  functionExtensions,\n  getExtensionOutputConfig,\n  themeExtensions,\n  uiExtensions,\n  isUiExtensionType,\n  isFunctionExtensionType,\n  functionExtensionTemplates,\n} from '../../constants'\nimport {getUIExtensionTemplates, isValidUIExtensionTemplate} from '../../utilities/extensions/template-configuration'\nimport {haiku, ui, environment} from '@shopify/cli-kit'\n\ninterface ScaffoldExtensionOptions {\n  name?: string\n  extensionType?: string\n  extensionTypesAlreadyAtQuota: string[]\n  extensionFlavor?: string\n}\n\ninterface ScaffoldExtensionOutput {\n  name: string\n  extensionType: ExtensionTypes\n  extensionFlavor?: string\n}\n\nexport const extensionFlavorQuestion = (extensionType: string): ui.Question => {\n  let choices: {name: string; value: string}[] = []\n  if (isUiExtensionType(extensionType)) {\n    choices = choices.concat(getUIExtensionTemplates(extensionType))\n  }\n  if (isFunctionExtensionType(extensionType)) {\n    choices = choices.concat(functionExtensionTemplates)\n  }\n  return {\n    type: 'select',\n    name: 'extensionFlavor',\n    message: 'Choose a starting template for your extension',\n    choices,\n    default: 'react',\n  }\n}\n\nconst scaffoldExtensionPrompt = async (\n  options: ScaffoldExtensionOptions,\n  prompt = ui.prompt,\n): Promise<ScaffoldExtensionOutput> => {\n  const questions: ui.Question<'name' | 'extensionType'>[] = []\n  const isShopify = await environment.local.isShopify()\n  const supportedExtensions = isShopify ? extensions.types : extensions.publicTypes\n  if (!options.extensionType) {\n    let relevantExtensionTypes = supportedExtensions.filter(\n      (type) => !options.extensionTypesAlreadyAtQuota.includes(type),\n    )\n    if (options.extensionFlavor) {\n      relevantExtensionTypes = relevantExtensionTypes.filter((relevantExtensionType) =>\n        isValidUIExtensionTemplate(relevantExtensionType, options.extensionFlavor),\n      )\n    }\n    questions.push({\n      type: 'select',\n      name: 'extensionType',\n      message: 'Type of extension?',\n      choices: relevantExtensionTypes\n        .map((type) => ({\n          name: getExtensionOutputConfig(type).humanKey,\n          value: type,\n        }))\n        .sort(extensionTypeChoiceSorterByGroupAndName),\n    })\n  }\n  if (!options.name) {\n    questions.push({\n      type: 'input',\n      name: 'name',\n      message: \"Your extension's working name?\",\n      default: haiku.generate('ext'),\n    })\n  }\n  let promptOutput: ScaffoldExtensionOutput = await prompt(questions)\n  const extensionType = {...options, ...promptOutput}.extensionType\n  if (!options.extensionFlavor && (isUiExtensionType(extensionType) || isFunctionExtensionType(extensionType))) {\n    promptOutput = {\n      ...promptOutput,\n      extensionFlavor: (\n        (await prompt([\n          extensionFlavorQuestion(extensionType),\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        ])) as any\n      ).extensionFlavor,\n    }\n  }\n  return {...options, ...promptOutput}\n}\n\n/**\n * Sorting method for prompt choices that sort alphabetically extensions showing first the UI ones\n * and latest the function ones\n */\nexport const extensionTypeChoiceSorterByGroupAndName = (\n  c1: {name: string; value: string},\n  c2: {name: string; value: string},\n) => {\n  const c1ExtensiontyCategoryPosition = extensiontypeCategoryPosition(c1.value)\n  const c2ExtensiontyCategoryPosition = extensiontypeCategoryPosition(c2.value)\n\n  if (c1ExtensiontyCategoryPosition === c2ExtensiontyCategoryPosition) {\n    return c1.name.localeCompare(c2.name)\n  } else {\n    return c1ExtensiontyCategoryPosition < c2ExtensiontyCategoryPosition ? -1 : 1\n  }\n}\n\n/**\n * It maps an extension category to a numeric value.\n * @param extensionType {string} The extension type which will be resolved to its category.\n * @returns The numeric value of the extension category.\n */\nconst extensiontypeCategoryPosition = (extensionType: string): number => {\n  if (includes(uiExtensions.types, extensionType) || includes(themeExtensions.types, extensionType)) {\n    return 0\n  } else if (includes(functionExtensions.types, extensionType)) {\n    return 1\n  } else {\n    return Number.MAX_VALUE\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction includes<T extends U, U>(coll: ReadonlyArray<T>, el: U): el is T {\n  return coll.includes(el as T)\n}\n\nexport default scaffoldExtensionPrompt\n","import {runGoExtensionsCLI} from '../../utilities/extensions/cli'\nimport {\n  blocks,\n  extensionTypeCategory,\n  ExtensionTypes,\n  getExtensionOutputConfig,\n  getUIExtensionRendererDependency,\n  ThemeExtensionTypes,\n  UIExtensionTypes,\n  FunctionExtensionTypes,\n  versions,\n} from '../../constants'\nimport {App} from '../../models/app/app'\nimport {error, file, git, path, string, template, ui, yaml, environment, dependency} from '@shopify/cli-kit'\nimport {fileURLToPath} from 'url'\nimport stream from 'node:stream'\n\nasync function getTemplatePath(name: string): Promise<string> {\n  const templatePath = await path.findUp(`templates/${name}`, {\n    cwd: path.dirname(fileURLToPath(import.meta.url)),\n    type: 'directory',\n  })\n  if (templatePath) {\n    return templatePath\n  } else {\n    throw new error.Bug(`Couldn't find the template ${name} in @shopify/app.`)\n  }\n}\n\ninterface ExtensionInitOptions<TExtensionTypes extends ExtensionTypes = ExtensionTypes> {\n  name: string\n  extensionType: TExtensionTypes\n  app: App\n  cloneUrl?: string\n  extensionFlavor?: string\n}\ninterface ExtensionDirectory {\n  extensionDirectory: string\n}\n\ntype FunctionExtensionInitOptions = ExtensionInitOptions<FunctionExtensionTypes> & ExtensionDirectory\ntype UIExtensionInitOptions = ExtensionInitOptions<UIExtensionTypes> & ExtensionDirectory\ntype ThemeExtensionInitOptions = ExtensionInitOptions<ThemeExtensionTypes> & ExtensionDirectory\n\nasync function extensionInit(options: ExtensionInitOptions): Promise<string> {\n  const extensionDirectory = await ensureExtensionDirectoryExists({app: options.app, name: options.name})\n  switch (extensionTypeCategory(options.extensionType)) {\n    case 'theme':\n      await themeExtensionInit({...(options as ThemeExtensionInitOptions), extensionDirectory})\n      break\n    case 'function':\n      await functionExtensionInit({...(options as FunctionExtensionInitOptions), extensionDirectory})\n      break\n    case 'ui':\n      await uiExtensionInit({...(options as UIExtensionInitOptions), extensionDirectory})\n      break\n  }\n  return extensionDirectory\n}\n\nasync function themeExtensionInit({name, app, extensionType, extensionDirectory}: ThemeExtensionInitOptions) {\n  const templatePath = await getTemplatePath('theme-extension')\n  await template.recursiveDirectoryCopy(templatePath, extensionDirectory, {name, extensionType})\n}\n\nasync function uiExtensionInit({\n  name,\n  extensionType,\n  app,\n  extensionFlavor,\n  extensionDirectory,\n}: UIExtensionInitOptions) {\n  const list = new ui.Listr(\n    [\n      {\n        title: 'Install additional dependencies',\n        task: async (_, task) => {\n          task.title = 'Installing additional dependencies...'\n          const requiredDependencies = getRuntimeDependencies({extensionType})\n          await dependency.addNPMDependenciesIfNeeded(requiredDependencies, {\n            dependencyManager: app.dependencyManager,\n            type: 'prod',\n            directory: app.directory,\n            stderr: new stream.Writable({\n              write(chunk, encoding, next) {\n                task.output = chunk.toString()\n                next()\n              },\n            }),\n            stdout: new stream.Writable({\n              write(chunk, encoding, next) {\n                task.output = chunk.toString()\n                next()\n              },\n            }),\n          })\n          task.title = 'Dependencies installed'\n        },\n      },\n      {\n        title: `Scaffold ${getExtensionOutputConfig(extensionType).humanKey} extension`,\n        task: async (_, task) => {\n          task.title = `Scaffolding ${getExtensionOutputConfig(extensionType).humanKey} extension...`\n          const stdin = yaml.encode({\n            extensions: [\n              {\n                title: name,\n                // Use the new templates\n                type: `${extensionType}_next`,\n                metafields: [],\n                development: {\n                  // eslint-disable-next-line @typescript-eslint/naming-convention\n                  root_dir: '.',\n                  template: extensionFlavor,\n                },\n              },\n            ],\n          })\n          await runGoExtensionsCLI(['create', '-'], {\n            cwd: extensionDirectory,\n            stderr: new stream.Writable({\n              write(chunk, encoding, next) {\n                task.output = chunk.toString()\n                next()\n              },\n            }),\n            stdout: new stream.Writable({\n              write(chunk, encoding, next) {\n                task.output = chunk.toString()\n                next()\n              },\n            }),\n            stdin,\n          })\n          task.title = `${getExtensionOutputConfig(extensionType).humanKey} extension scaffolded`\n        },\n      },\n    ],\n    {rendererSilent: environment.local.isUnitTest()},\n  )\n  await list.run()\n}\n\nexport function getRuntimeDependencies({\n  extensionType,\n}: Pick<UIExtensionInitOptions, 'extensionType'>): dependency.DependencyVersion[] {\n  switch (extensionType) {\n    case 'product_subscription':\n    case 'checkout_ui_extension':\n    case 'pos_ui_extension':\n    case 'web_pixel_extension':\n    case 'checkout_post_purchase': {\n      const dependencies: dependency.DependencyVersion[] = [{name: 'react', version: versions.react}]\n      const rendererDependency = getUIExtensionRendererDependency(extensionType)\n      if (rendererDependency) {\n        dependencies.push(rendererDependency)\n      }\n      return dependencies\n    }\n  }\n}\n\nasync function functionExtensionInit(options: FunctionExtensionInitOptions) {\n  const url = options.cloneUrl || blocks.functions.defaultUrl\n  await file.inTemporaryDirectory(async (tmpDir) => {\n    const templateDownloadDir = path.join(tmpDir, 'download')\n\n    const list = new ui.Listr(\n      [\n        {\n          title: `Scaffolding ${getExtensionOutputConfig(options.extensionType).humanKey} extension...`,\n          task: async (_, task) => {\n            await file.mkdir(templateDownloadDir)\n            await git.downloadRepository({\n              repoUrl: url,\n              destination: templateDownloadDir,\n              shallow: true,\n              progressUpdater: (statusString: string) => {\n                const taskOutput = `Cloning template from ${url}:\\n${statusString}`\n                task.output = taskOutput\n              },\n            })\n            const origin = path.join(templateDownloadDir, functionTemplatePath(options))\n            await template.recursiveDirectoryCopy(origin, options.extensionDirectory, options)\n            const configYamlPath = path.join(options.extensionDirectory, 'script.config.yml')\n            if (await file.exists(configYamlPath)) {\n              await file.remove(configYamlPath)\n            }\n            task.title = `${getExtensionOutputConfig(options.extensionType).humanKey} extension scaffolded`\n          },\n        },\n      ],\n      {rendererSilent: environment.local.isUnitTest()},\n    )\n    await list.run()\n  })\n}\n\nfunction functionTemplatePath({extensionType, extensionFlavor}: FunctionExtensionInitOptions): string {\n  const lang = extensionFlavor || blocks.functions.defaultLanguage\n  switch (extensionType) {\n    case 'product_discounts':\n      return `discounts/${lang}/product-discounts/default`\n    case 'order_discounts':\n      return `discounts/${lang}/order-discounts/default`\n    case 'shipping_discounts':\n      return `discounts/${lang}/shipping-discounts/default`\n    case 'payment_methods':\n      return `checkout/${lang}/payment-methods/default`\n    case 'shipping_rate_presenter':\n      return `checkout/${lang}/shipping-rate-presenter/default`\n  }\n}\n\nasync function ensureExtensionDirectoryExists({name, app}: {name: string; app: App}): Promise<string> {\n  const hyphenizedName = string.hyphenize(name)\n  const extensionDirectory = path.join(app.directory, blocks.extensions.directoryName, hyphenizedName)\n  if (await file.exists(extensionDirectory)) {\n    throw new error.Abort(\n      `\\nA directory with this name (${hyphenizedName}) already exists.\\nChoose a new name for your extension.`,\n    )\n  }\n  await file.mkdir(extensionDirectory)\n  return extensionDirectory\n}\n\nexport default extensionInit\n","import {appFlags} from '../../../flags'\nimport {\n  extensions,\n  ExtensionTypes,\n  getExtensionOutputConfig,\n  limitedExtensions,\n  isUiExtensionType,\n  isFunctionExtensionType,\n  functionExtensionTemplates,\n} from '../../../constants'\nimport scaffoldExtensionPrompt from '../../../prompts/scaffold/extension'\nimport {load as loadApp, App} from '../../../models/app/app'\nimport scaffoldExtensionService from '../../../services/scaffold/extension'\nimport {getUIExtensionTemplates} from '../../../utilities/extensions/template-configuration'\nimport {output, path, cli, error, environment, dependency} from '@shopify/cli-kit'\nimport {Command, Flags} from '@oclif/core'\n\nexport default class AppScaffoldExtension extends Command {\n  static description = 'Scaffold an Extension'\n  static examples = ['<%= config.bin %> <%= command.id %>']\n\n  static flags = {\n    ...cli.globalFlags,\n    ...appFlags,\n    type: Flags.string({\n      char: 't',\n      hidden: false,\n      description: `Extension type\\n<options: ${extensions.publicTypes.join('|')}>`,\n      env: 'SHOPIFY_FLAG_EXTENSION_TYPE',\n    }),\n    name: Flags.string({\n      char: 'n',\n      hidden: false,\n      description: 'name of your Extension',\n      env: 'SHOPIFY_FLAG_NAME',\n    }),\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    'clone-url': Flags.string({\n      hidden: true,\n      char: 'u',\n      description:\n        'The Git URL to clone the function extensions templates from. Defaults to: https://github.com/Shopify/function-examples',\n      env: 'SHOPIFY_FLAG_CLONE_URL',\n    }),\n    template: Flags.string({\n      hidden: false,\n      description: 'Choose a starting template for your extension, where applicable',\n      options: ['vanilla-js', 'react', 'wasm', 'rust'],\n      env: 'SHOPIFY_FLAG_TEMPLATE',\n    }),\n  }\n\n  static args = [{name: 'file'}]\n\n  public async run(): Promise<void> {\n    const {flags} = await this.parse(AppScaffoldExtension)\n    const directory = flags.path ? path.resolve(flags.path) : process.cwd()\n    const app: App = await loadApp(directory)\n\n    await this.validateExtensionType(flags.type)\n    this.validateExtensionTypeLimit(app, flags.type)\n    const extensionFlavor = flags.template\n    this.validateExtensionFlavor(flags.type, extensionFlavor)\n\n    const promptAnswers = await scaffoldExtensionPrompt({\n      extensionType: flags.type,\n      extensionTypesAlreadyAtQuota: this.limitedExtensionsAlreadyScaffolded(app),\n      name: flags.name,\n      extensionFlavor,\n    })\n\n    const extensionDirectory = await scaffoldExtensionService({\n      ...promptAnswers,\n      extensionType: promptAnswers.extensionType,\n      app,\n      cloneUrl: flags['clone-url'],\n    })\n\n    const formattedSuccessfulMessage = this.formatSuccessfulRunMessage(\n      promptAnswers.extensionType,\n      path.relative(app.directory, extensionDirectory),\n      app.dependencyManager,\n    )\n    output.info(formattedSuccessfulMessage)\n  }\n\n  async validateExtensionType(type: string | undefined) {\n    if (!type) {\n      return\n    }\n    const isShopify = await environment.local.isShopify()\n    const supportedExtensions = isShopify ? extensions.types : extensions.publicTypes\n    if (!(supportedExtensions as string[]).includes(type)) {\n      throw new error.Abort(\n        `Invalid extension type ${type}`,\n        `The following extension types are supported: ${supportedExtensions.join(', ')}`,\n      )\n    }\n  }\n\n  /**\n   * If the type passed as flag is not valid because it has already been scaffolded\n   * and we don't allow multiple extensions of that type, throw an error\n   * @param app {App} current App\n   * @param type {string} extension type\n   */\n  validateExtensionTypeLimit(app: App, type: string | undefined) {\n    if (type && this.limitedExtensionsAlreadyScaffolded(app).includes(type)) {\n      throw new error.Abort('Invalid extension type', `You can only scaffold one extension of type ${type} per app`)\n    }\n  }\n\n  validateExtensionFlavor(type: string | undefined, flavor: string | undefined) {\n    if (!flavor || !type) {\n      return\n    }\n    const uiExtensionTemplateNames = getUIExtensionTemplates(type).map((template) => template.value)\n    const functionExtensionTemplateNames = functionExtensionTemplates.map((template) => template.value)\n\n    const invalidTemplateError = (templates: string[]) => {\n      return new error.Abort(\n        'Specified extension template on invalid extension type',\n        `You can only specify a template for these extension types: ${templates.join(', ')}.`,\n      )\n    }\n    if (isUiExtensionType(type) && !uiExtensionTemplateNames.includes(flavor)) {\n      throw invalidTemplateError(uiExtensionTemplateNames)\n    }\n    if (isFunctionExtensionType(type) && !functionExtensionTemplateNames.includes(flavor)) {\n      throw invalidTemplateError(functionExtensionTemplateNames)\n    }\n  }\n\n  /**\n   * Some extension types like `theme` and `product_subscription` are limited to one per app\n   * Use this method to retrieve a list of the limited types that have already been scaffolded\n   *\n   * @param app {App} current App\n   * @returns {string[]} list of extensions that are limited by quantity and are already scaffolded\n   */\n  limitedExtensionsAlreadyScaffolded(app: App): string[] {\n    const themeTypes = app.extensions.theme.map((ext) => ext.configuration.type)\n    const uiTypes = app.extensions.ui.map((ext) => ext.configuration.type)\n\n    const themeExtensions = themeTypes.filter((type) => limitedExtensions.theme.includes(type))\n    const uiExtensions = uiTypes.filter((type) => limitedExtensions.ui.includes(type))\n    return [...themeExtensions, ...uiExtensions]\n  }\n\n  formatSuccessfulRunMessage(\n    extensionType: ExtensionTypes,\n    extensionDirectory: string,\n    depndencyManager: dependency.DependencyManager,\n  ): string {\n    const extensionOutputConfig = getExtensionOutputConfig(extensionType)\n    output.completed(`Your ${extensionOutputConfig.humanKey} extension was added to your project!`)\n\n    const outputTokens = []\n    outputTokens.push(\n      output.content`\\n  To find your extension, remember to ${output.token.genericShellCommand(\n        output.content`cd ${output.token.path(extensionDirectory)}`,\n      )}`.value,\n    )\n\n    if (isUiExtensionType(extensionType)) {\n      outputTokens.push(\n        output.content`  To preview your project, run ${output.token.packagejsonScript(depndencyManager, 'dev')}`.value,\n      )\n    }\n\n    if (extensionOutputConfig.additionalHelp) {\n      outputTokens.push(`  ${extensionOutputConfig.additionalHelp}`)\n    }\n\n    if (extensionOutputConfig.helpURL) {\n      outputTokens.push(\n        output.content`  For more details, see the ${output.token.link('docs', extensionOutputConfig.helpURL)} ✨`\n          .value,\n      )\n    }\n\n    return outputTokens.join('\\n').concat('\\n')\n  }\n}\n"],"names":["loadApp","scaffoldExtensionService"],"mappings":"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"}