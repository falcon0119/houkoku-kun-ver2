import { a as appFlags, l as load } from '../../app-5df50971.js';
import { b as buildThemeExtensions, a as buildUIExtensions, c as buildFunctionExtension } from '../../extension-3fd19049.js';
import { system, output, cli, path } from '@shopify/cli-kit';
import { i as installAppDependencies } from '../../dependencies-50b909dd.js';
import { Flags, Command } from '@oclif/core';
import '../../cli-925c35a7.js';
import 'node:zlib';
import 'node:fs';
import 'node:stream';
import 'node:util';
import 'url';
import '../../configuration-c24e74ba.js';

async function web(command, { web: web2, stdout, stderr, signal, env = {} }) {
  const script = web2.configuration.commands[command];
  if (!script) {
    return;
  }
  const [cmd, ...args] = script.split(" ");
  await system.exec(cmd, args, { cwd: web2.directory, stdout, stderr, signal, env });
  stdout.write("Web successfully built.");
}

async function build({ app, skipDependenciesInstallation, apiKey = void 0 }) {
  if (!skipDependenciesInstallation) {
    await installAppDependencies(app);
  }
  const env = {};
  if (apiKey) {
    env.SHOPIFY_API_KEY = apiKey;
  }
  await output.concurrent([
    ...app.webs.map((web$1) => {
      return {
        prefix: web$1.configuration.type,
        action: async (stdout, stderr, signal) => {
          await web("build", { web: web$1, stdout, stderr, signal, env });
        }
      };
    }),
    {
      prefix: "theme_extensions",
      action: async (stdout, stderr, signal) => {
        await buildThemeExtensions({
          app,
          extensions: app.extensions.theme,
          stdout,
          stderr,
          signal
        });
      }
    },
    {
      prefix: "extensions",
      action: async (stdout, stderr, signal) => {
        await buildUIExtensions({
          app,
          extensions: app.extensions.ui,
          stdout,
          stderr,
          signal
        });
      }
    },
    ...app.extensions.function.map((functionExtension) => {
      return {
        prefix: functionExtension.localIdentifier,
        action: async (stdout, stderr, signal) => {
          await buildFunctionExtension(functionExtension, { stdout, stderr, signal, app });
        }
      };
    })
  ]);
  output.newline();
  output.success(`${app.name} built`);
}

const _Build = class extends Command {
  async run() {
    const { flags } = await this.parse(_Build);
    const directory = flags.path ? path.resolve(flags.path) : process.cwd();
    const app = await load(directory);
    await build({ app, skipDependenciesInstallation: flags["skip-dependencies-installation"], apiKey: flags["api-key"] });
  }
};
let Build = _Build;
Build.description = "Build the app";
Build.flags = {
  ...cli.globalFlags,
  ...appFlags,
  "skip-dependencies-installation": Flags.boolean({
    hidden: false,
    description: "Skips the installation of dependencies.",
    env: "SHOPIFY_FLAG_SKIP_DEPENDENCIES_INSTALLATION",
    default: false
  }),
  "api-key": Flags.string({
    hidden: false,
    description: "Application's API key that will be exposed at build time.",
    env: "SHOPIFY_FLAG_API_KEY"
  })
};

export { Build as default };
//# sourceMappingURL=build.js.map
