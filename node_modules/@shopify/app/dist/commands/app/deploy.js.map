{"version":3,"file":"deploy.js","sources":["../../../src/cli/services/deploy/bundle.ts","../../../src/cli/services/deploy/theme-extension-config.ts","../../../src/cli/services/deploy/upload.ts","../../../src/cli/utilities/extensions/locales-configuration.ts","../../../src/cli/validators/extensions/functions.ts","../../../src/cli/validators/extensions/ui.ts","../../../src/cli/validators/extensions/theme.ts","../../../src/cli/validators/extensions.ts","../../../src/cli/services/deploy.ts","../../../src/cli/commands/app/deploy.ts"],"sourcesContent":["import {buildThemeExtensions, buildFunctionExtension, buildUIExtensions} from '../build/extension'\nimport {App, Identifiers} from '../../models/app/app'\nimport {path, output, temporary, file, error} from '@shopify/cli-kit'\nimport {zip} from '@shopify/cli-kit/node/archiver'\n\nimport {Writable} from 'node:stream'\n\ninterface BundleOptions {\n  app: App\n  bundlePath: string\n  identifiers: Identifiers\n  bundle: boolean\n}\n\nexport async function bundleUIAndBuildFunctionExtensions(options: BundleOptions) {\n  await temporary.directory(async (tmpDir) => {\n    const bundleDirectory = path.join(tmpDir, 'bundle')\n    await file.mkdir(bundleDirectory)\n    await file.touch(path.join(bundleDirectory, '.shopify'))\n\n    await output.concurrent([\n      {\n        prefix: 'theme_extensions',\n        action: async (stdout: Writable, stderr: Writable, signal: error.AbortSignal) => {\n          await buildThemeExtensions({\n            app: options.app,\n            extensions: options.app.extensions.theme,\n            stdout,\n            stderr,\n            signal,\n          })\n        },\n      },\n      {\n        prefix: 'extensions',\n        action: async (stdout: Writable, stderr: Writable, signal: error.AbortSignal) => {\n          /**\n           * For deployment we want the build process to ouptut the artifacts directly in the directory\n           * to prevent artifacts from past builds from leaking into deploy builds.\n           */\n          const extensions = options.app.extensions.ui.map((extension) => {\n            const extensionId = options.identifiers.extensions[extension.localIdentifier]\n            const buildDirectory = path.join(bundleDirectory, extensionId)\n            return {...extension, buildDirectory}\n          })\n          await buildUIExtensions({\n            app: options.app,\n            extensions,\n            stdout,\n            stderr,\n            signal,\n          })\n        },\n      },\n      ...options.app.extensions.function.map((functionExtension) => {\n        return {\n          prefix: `function_${functionExtension.localIdentifier}`,\n          action: async (stdout: Writable, stderr: Writable, signal: error.AbortSignal) => {\n            await buildFunctionExtension(functionExtension, {stdout, stderr, signal, app: options.app})\n          },\n        }\n      }),\n    ])\n\n    if (options.bundle) {\n      await zip(bundleDirectory, options.bundlePath)\n    }\n  })\n}\n","import {ThemeExtension} from '../../models/app/app'\nimport {file, path} from '@shopify/cli-kit'\n\nexport interface ThemeExtensionConfig {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  theme_extension: {\n    files: {[key: string]: string}\n  }\n}\n\nexport async function themeExtensionConfig(themeExtension: ThemeExtension): Promise<ThemeExtensionConfig> {\n  const files: {[key: string]: string} = {}\n  const themeFiles = await path.glob(path.join(themeExtension.directory, '*/*'))\n  await Promise.all(\n    themeFiles.map(async (filepath) => {\n      const relativePath = path.relative(themeExtension.directory, filepath)\n      const dirname = path.dirname(relativePath)\n      const encoding = dirname === 'assets' ? 'binary' : 'utf8'\n      const fileContents = await file.read(filepath, {encoding})\n      files[relativePath] = Buffer.from(fileContents, encoding).toString('base64')\n    }),\n  )\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  return {theme_extension: {files}}\n}\n","import {themeExtensionConfig as generateThemeExtensionConfig} from './theme-extension-config'\nimport {FunctionExtension, Identifiers, IdentifiersExtensions, ThemeExtension} from '../../models/app/app'\nimport {blocks, getFunctionExtensionPointName} from '../../constants'\nimport {api, error, session, http, id, output, file} from '@shopify/cli-kit'\n\nimport fs from 'fs'\n\ninterface DeployThemeExtensionOptions {\n  /** The application API key */\n  apiKey: string\n\n  /** Set of local identifiers */\n  identifiers: Identifiers\n\n  /** The token to send authenticated requests to the partners' API  */\n  token: string\n}\n\n/**\n * Uploads theme extension(s)\n * @param options {DeployThemeExtensionOptions} The upload options\n */\n\nexport async function uploadThemeExtensions(\n  themeExtensions: ThemeExtension[],\n  options: DeployThemeExtensionOptions,\n): Promise<void> {\n  const {apiKey, identifiers, token} = options\n  await Promise.all(\n    themeExtensions.map(async (themeExtension) => {\n      const themeExtensionConfig = await generateThemeExtensionConfig(themeExtension)\n      const themeId = identifiers.extensionIds[themeExtension.localIdentifier]\n      const themeExtensionInput: api.graphql.ExtensionUpdateDraftInput = {\n        apiKey,\n        config: JSON.stringify(themeExtensionConfig),\n        context: undefined,\n        registrationId: themeId,\n      }\n      const mutation = api.graphql.ExtensionUpdateDraftMutation\n      const result: api.graphql.ExtensionUpdateSchema = await api.partners.request(mutation, token, themeExtensionInput)\n      if (result.extensionUpdateDraft?.userErrors?.length > 0) {\n        const errors = result.extensionUpdateDraft.userErrors.map((error) => error.message).join(', ')\n        throw new error.Abort(errors)\n      }\n    }),\n  )\n}\n\ninterface UploadUIExtensionsBundleOptions {\n  /** The application API key */\n  apiKey: string\n\n  /** The path to the bundle file to be uploaded */\n  bundlePath: string\n\n  /** The token to send authenticated requests to the partners' API  */\n  token: string\n\n  /** Extensions extra data */\n  extensions: api.graphql.ExtensionSettings[]\n}\n\n/**\n * Uploads a bundle.\n * @param options {UploadUIExtensionsBundleOptions} The upload options\n */\nexport async function uploadUIExtensionsBundle(options: UploadUIExtensionsBundleOptions) {\n  const deploymentUUID = id.generateRandomUUID()\n  const signedURL = await getUIExtensionUploadURL(options.apiKey, deploymentUUID)\n\n  const formData = http.formData()\n  const buffer = fs.readFileSync(options.bundlePath)\n  formData.append('my_upload', buffer)\n  await http.fetch(signedURL, {\n    method: 'put',\n    body: buffer,\n    headers: formData.getHeaders(),\n  })\n\n  const variables: api.graphql.CreateDeploymentVariables = {\n    apiKey: options.apiKey,\n    uuid: deploymentUUID,\n    bundleUrl: signedURL,\n    extensions: options.extensions,\n  }\n\n  const mutation = api.graphql.CreateDeployment\n  const result: api.graphql.CreateDeploymentSchema = await api.partners.request(mutation, options.token, variables)\n  if (result.deploymentCreate?.userErrors?.length > 0) {\n    const errors = result.deploymentCreate.userErrors.map((error) => error.message).join(', ')\n    throw new error.Abort(errors)\n  }\n}\n\n/**\n * It generates a URL to upload an app bundle.\n * @param apiKey {string} The application API key\n * @param deploymentUUID {string} The unique identifier of the deployment.\n * @returns\n */\nexport async function getUIExtensionUploadURL(apiKey: string, deploymentUUID: string) {\n  const mutation = api.graphql.GenerateSignedUploadUrl\n  const token = await session.ensureAuthenticatedPartners()\n  const variables: api.graphql.GenerateSignedUploadUrlVariables = {\n    apiKey,\n    deploymentUuid: deploymentUUID,\n    bundleFormat: 1,\n  }\n\n  const result: api.graphql.GenerateSignedUploadUrlSchema = await api.partners.request(mutation, token, variables)\n  if (result.deploymentGenerateSignedUploadUrl?.userErrors?.length > 0) {\n    const errors = result.deploymentGenerateSignedUploadUrl.userErrors.map((error) => error.message).join(', ')\n    throw new error.Abort(errors)\n  }\n\n  return result.deploymentGenerateSignedUploadUrl.signedUploadUrl\n}\n\ninterface UploadFunctionExtensionsOptions {\n  /** The token to send authenticated requests to the partners' API  */\n  token: string\n\n  // Set of local identifiers\n  identifiers: Identifiers\n}\n\n/**\n * This function takes a list of function extensions and uploads them.\n * As part of the upload it creates a function server-side if it does not exist\n * and includes its remote identifier in the returned identifiers instance.\n * If the function already has a local id, that one is used and the upload\n * does an override of the function existing server-side.\n *\n * @param extensions {FunctionExtension[]} The list of extensions to upload.\n * @param options {UploadFunctionExtensionsOptions} Options to adjust the upload.\n * @returns {Promise<Identifiers>} A promise that resolves with the identifiers.\n */\nexport async function uploadFunctionExtensions(\n  extensions: FunctionExtension[],\n  options: UploadFunctionExtensionsOptions,\n): Promise<Identifiers> {\n  let identifiers = options.identifiers\n\n  const functionUUIDs: IdentifiersExtensions = {}\n\n  // Functions are uploaded sequentially to avoid reaching the API limit\n  for (const extension of extensions) {\n    // eslint-disable-next-line no-await-in-loop\n    const remoteIdentifier = await uploadFunctionExtension(extension, {\n      apiKey: options.identifiers.app,\n      token: options.token,\n      identifier: identifiers.extensions[extension.localIdentifier],\n    })\n    functionUUIDs[extension.localIdentifier] = remoteIdentifier\n  }\n\n  identifiers = {\n    ...identifiers,\n    extensions: {\n      ...identifiers.extensions,\n      ...functionUUIDs,\n    },\n  }\n\n  return identifiers\n}\n\ninterface UploadFunctionExtensionOptions {\n  apiKey: string\n  identifier?: string\n  token: string\n}\n\nasync function uploadFunctionExtension(\n  extension: FunctionExtension,\n  options: UploadFunctionExtensionOptions,\n): Promise<string> {\n  const {url, headers} = await getFunctionExtensionUploadURL({apiKey: options.apiKey, token: options.token})\n  headers['Content-Type'] = 'application/wasm'\n\n  let inputQuery: string | undefined\n  if (await file.exists(extension.inputQueryPath())) {\n    inputQuery = await file.read(extension.inputQueryPath())\n  }\n\n  const functionContent = fs.readFileSync(extension.buildWasmPath())\n  await http.fetch(url, {body: functionContent, headers, method: 'PUT'})\n  await compileFunctionExtension(extension, options, url)\n\n  const query = api.graphql.AppFunctionSetMutation\n  const schemaVersions = Object.values(extension.metadata.schemaVersions).shift()\n  const schemaMajorVersion = schemaVersions?.major\n  const schemaMinorVersion = schemaVersions?.minor\n\n  const variables: api.graphql.AppFunctionSetVariables = {\n    uuid: options.identifier,\n    extensionPointName: getFunctionExtensionPointName(extension.configuration.type),\n    title: extension.configuration.name,\n    description: extension.configuration.description,\n    force: true,\n    schemaMajorVersion: schemaMajorVersion === undefined ? '' : `${schemaMajorVersion}`,\n    schemaMinorVersion: schemaMinorVersion === undefined ? '' : `${schemaMinorVersion}`,\n    configurationUi: extension.configuration.configurationUi,\n    moduleUploadUrl: url,\n    apiVersion: extension.configuration.apiVersion,\n    skipCompilationJob: true,\n    appBridge: extension.configuration.ui?.paths\n      ? {\n          detailsPath: extension.configuration.ui.paths.details,\n          createPath: extension.configuration.ui.paths.create,\n        }\n      : undefined,\n    inputQuery,\n  }\n  const res: api.graphql.AppFunctionSetMutationSchema = await api.partners.functionProxyRequest(\n    options.apiKey,\n    query,\n    options.token,\n    variables,\n  )\n  const userErrors = res.data.appScriptSet.userErrors ?? []\n  if (userErrors.length !== 0) {\n    const errorMessage = output.content`The deployment of functions failed with the following errors:\n${output.token.json(userErrors)}\n    `\n    throw new error.Abort(errorMessage)\n  }\n  const uuid = res.data.appScriptSet.appScript?.uuid as string\n  return uuid\n}\n\nasync function compileFunctionExtension(\n  extension: FunctionExtension,\n  options: UploadFunctionExtensionOptions,\n  moduleUploadUrl: string,\n): Promise<void> {\n  const query = api.graphql.CompileModuleMutation\n  const variables: api.graphql.CompileModuleMutationVariables = {\n    moduleUploadUrl,\n  }\n  const res: api.graphql.CompileModuleMutationSchema = await api.partners.functionProxyRequest(\n    options.apiKey,\n    query,\n    options.token,\n    variables,\n  )\n  const jobId = res.data.compileModule.jobId\n\n  await waitForCompilation(extension, options, jobId)\n}\n\nasync function getCompilationStatus(options: UploadFunctionExtensionOptions, compilationJobId: string) {\n  const query = api.graphql.ModuleCompilationStatusQuery\n  const variables: api.graphql.ModuleCompilationQueryVariables = {\n    jobId: compilationJobId,\n  }\n  const res: api.graphql.ModuleCompilationStatusQuerySchema = await api.partners.functionProxyRequest(\n    options.apiKey,\n    query,\n    options.token,\n    variables,\n  )\n  return res.data.moduleCompilationStatus.status\n}\n\nasync function waitForCompilation(\n  extension: FunctionExtension,\n  options: UploadFunctionExtensionOptions,\n  compilationJobId: string,\n) {\n  let retries = 0\n\n  const poll = async (): Promise<void> => {\n    const compilationStatus = await getCompilationStatus(options, compilationJobId)\n    // eslint-disable-next-line no-empty\n    if (compilationStatus === 'completed') {\n    } else if (compilationStatus !== 'pending') {\n      throw new error.Abort(output.content`Function ${extension.localIdentifier} compilation failed.`)\n    } else if (retries < blocks.functions.maxCompilationStatusCheckCount) {\n      retries++\n      return sleep(blocks.functions.compilationStatusWaitMs).then(() => poll())\n    } else {\n      throw new error.Abort(output.content`Function ${extension.localIdentifier} compilation timed out.`)\n    }\n  }\n\n  return poll()\n}\n\nfunction sleep(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\ninterface GetFunctionExtensionUploadURLOptions {\n  apiKey: string\n  token: string\n}\n\ninterface GetFunctionExtensionUploadURLOutput {\n  url: string\n  headers: {[key: string]: string}\n}\n\nasync function getFunctionExtensionUploadURL(\n  options: GetFunctionExtensionUploadURLOptions,\n): Promise<GetFunctionExtensionUploadURLOutput> {\n  const query = api.graphql.ModuleUploadUrlGenerateMutation\n  const res: api.graphql.ModuleUploadUrlGenerateMutationSchema = await api.partners.functionProxyRequest(\n    options.apiKey,\n    query,\n    options.token,\n  )\n  return res.data.moduleUploadUrlGenerate.details\n}\n","import {error, path} from '@shopify/cli-kit'\nimport fs from 'fs'\n\nconst L10N_FILE_SIZE_LIMIT = 16 * 1024\nconst L10N_BUNDLE_SIZE_LIMIT = 256 * 1024\n\nconst MissingDefaultLanguageError = () => {\n  return new error.Abort(\n    'Missing default language in checkout_ui_extension configuration',\n    'Make sure to have a {locale}.default.json file in your locales directory',\n  )\n}\n\nconst BigBundleError = () => {\n  return new error.Abort(\n    `Error loading checkout_ui_extension`,\n    `Total size of all locale files must be less than ${L10N_BUNDLE_SIZE_LIMIT}`,\n  )\n}\n\nconst BigFileError = (filename: string) => {\n  return new error.Abort(\n    `Error loading checkout_ui_extension`,\n    `Locale file ${filename} size must be less than ${L10N_FILE_SIZE_LIMIT}`,\n  )\n}\n\nconst EmptyFileError = (filename: string) => {\n  return new error.Abort(`Error loading checkout_ui_extension`, `Locale file ${filename} can't be empty`)\n}\n\nconst MultipleDefaultError = () => {\n  return new error.Abort(\n    `Error loading checkout_ui_extension`,\n    `There must be one (and only one) locale identified as the default locale: e.g. \"en.default.json\"`,\n  )\n}\n\nexport async function loadLocalesConfig(extensionPath: string) {\n  const localesPaths = await path.glob(path.join(extensionPath, 'locales/*.json'))\n  if (localesPaths.length === 0) return {}\n\n  // Bundle validations\n  const totalBundleSize = bundleSize(localesPaths)\n  const defaultLanguageCode = findDefaultLocale(localesPaths)\n  if (defaultLanguageCode.length === 0) throw MissingDefaultLanguageError()\n  if (defaultLanguageCode.length > 1) throw MultipleDefaultError()\n  if (totalBundleSize > L10N_BUNDLE_SIZE_LIMIT) throw BigBundleError()\n\n  // Locale validations\n  for (const locale of localesPaths) {\n    const size = fs.statSync(locale).size\n    if (size > L10N_FILE_SIZE_LIMIT) throw BigFileError(locale)\n    if (size === 0) throw EmptyFileError(locale)\n  }\n\n  return {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    default_locale: defaultLanguageCode[0],\n    translations: getAllLocales(localesPaths),\n  }\n}\n\nfunction findDefaultLocale(filePaths: string[]) {\n  const defaultLocale = filePaths.filter((locale) => path.basename(locale).endsWith('.default.json'))\n  return defaultLocale.map((locale) => path.basename(locale).split('.')[0])\n}\n\nfunction getAllLocales(localesPath: string[]) {\n  const all: {[key: string]: string} = {}\n  for (const localePath of localesPath) {\n    const localeCode = path.basename(localePath).split('.')[0]\n    const locale = fs.readFileSync(localePath, 'base64')\n    all[localeCode] = locale\n  }\n  return all\n}\n\nfunction bundleSize(localesPaths: string[]) {\n  return localesPaths.map((locale) => fs.statSync(locale).size).reduce((acc, size) => acc + size, 0)\n}\n","import {FunctionExtension} from '../../models/app/app'\nimport {file, output, error} from '@shopify/cli-kit'\n\nconst FunctionsWithMissingWasm = (extensions: {id: string; path: string}[]) => {\n  const extensionLine = (extension: {id: string; path: string}): string => {\n    return output.stringifyMessage(\n      output.content`· ${output.token.green(extension.id)}: ${output.token.path(extension.path)}`,\n    )\n  }\n  const extensionLines = output.token.raw(extensions.map(extensionLine).join('\\n'))\n  return new error.Abort(\n    output.content`The following function extensions haven't compiled the wasm in the expected path:\n  ${extensionLines}\n      `,\n    `Make sure the build command outputs the wasm in the expected directory.`,\n  )\n}\n\nexport async function validateFunctionExtensions(extensions: FunctionExtension[]) {\n  await validateFunctionsWasmPresence(extensions)\n}\n\nexport async function validateFunctionsWasmPresence(extensions: FunctionExtension[]) {\n  const extensionsWithoutWasm = (\n    await Promise.all(\n      extensions.map(async (extension) => {\n        const wasmPath = extension.buildWasmPath()\n        return (await file.exists(wasmPath))\n          ? undefined\n          : {\n              id: extension.localIdentifier,\n              path: extension.buildWasmPath(),\n            }\n      }),\n    )\n  ).filter((extension) => extension !== undefined) as {id: string; path: string}[]\n  if (extensionsWithoutWasm.length !== 0) {\n    throw FunctionsWithMissingWasm(extensionsWithoutWasm)\n  }\n}\n","import {UIExtension} from '../../models/app/app'\nimport {error} from '@shopify/cli-kit'\n\nconst WebPixelConfigError = (property: string) => {\n  return new error.Abort(\n    `The Web Pixel Extension configuration is missing the key \"${property}\"`,\n    `Please update your shopify.ui.extension.toml to include a valid \"${property}\"`,\n  )\n}\n\nexport function validateUIExtensions(extensions: UIExtension[]) {\n  for (const extension of extensions) {\n    switch (extension.type) {\n      case 'web_pixel_extension':\n        validateWebPixelConfig(extension)\n        break\n      default:\n        break\n    }\n  }\n}\n\nexport function validateWebPixelConfig(extension: UIExtension) {\n  if (!extension.configuration.runtimeContext) {\n    throw WebPixelConfigError('runtime_context')\n  }\n\n  if (!extension.configuration.configuration) {\n    throw WebPixelConfigError('configuration')\n  }\n}\n","import {ThemeExtension} from '../../models/app/app'\nimport {error, file, output, path} from '@shopify/cli-kit'\n\ninterface FilenameValidation {\n  validator: RegExp\n  failureMessage: (filename: string) => string\n}\n\nconst kilobytes = 1024\nconst megabytes = kilobytes * 1024\n\nconst BUNDLE_SIZE_LIMIT_MB = 10\nconst BUNDLE_SIZE_LIMIT = BUNDLE_SIZE_LIMIT_MB * megabytes\nconst LIQUID_SIZE_LIMIT_KB = 100\nconst LIQUID_SIZE_LIMIT = LIQUID_SIZE_LIMIT_KB * kilobytes\n\nconst SUPPORTED_ASSET_EXTS = ['.jpg', '.js', '.css', '.png', '.svg']\nconst SUPPORTED_LOCALE_EXTS = ['.json']\nconst SUPPORTED_EXTS: {[dirname: string]: FilenameValidation} = {\n  assets: {\n    validator: new RegExp(`${SUPPORTED_ASSET_EXTS.join('|')}$`),\n    failureMessage: (filename: string) =>\n      `Only these filetypes are supported in assets: ${SUPPORTED_ASSET_EXTS.join(', ')}`,\n  },\n  blocks: {\n    validator: /.liquid$/,\n    failureMessage: (filename: string) => `Only .liquid files are allowed in blocks.`,\n  },\n  locales: {\n    validator: new RegExp(`${SUPPORTED_LOCALE_EXTS.join('|')}$`),\n    failureMessage: (filename: string) =>\n      `Only these filetypes are supported in locales: ${SUPPORTED_LOCALE_EXTS.join(', ')}`,\n  },\n  snippets: {\n    validator: /.liquid$/,\n    failureMessage: (filename: string) => `Only .liquid files are allowed in snippets.`,\n  },\n}\nconst SUPPORTED_BUCKETS = Object.keys(SUPPORTED_EXTS)\n\nexport async function validateThemeExtensions(extensions: ThemeExtension[]) {\n  await Promise.all(extensions.map((extension) => validateThemeExtension(extension)))\n}\n\nasync function validateThemeExtension(extension: ThemeExtension): Promise<void> {\n  const themeFiles = await path.glob(path.join(extension.directory, '*/*'))\n  const liquidBytes: number[] = []\n  const extensionBytes: number[] = []\n  await Promise.all(\n    themeFiles.map(async (filepath) => {\n      const relativePath = path.relative(extension.directory, filepath)\n      const dirname = path.dirname(relativePath)\n      validateFile(relativePath, dirname)\n      const filesize = await file.size(filepath)\n      extensionBytes.push(filesize)\n      if (['blocks', 'snippets'].includes(dirname)) liquidBytes.push(filesize)\n    }),\n  )\n  validateExtensionBytes(arraySum(extensionBytes))\n  validateLiquidBytes(arraySum(liquidBytes))\n}\n\nfunction validateExtensionBytes(extensionBytesTotal: number): void {\n  if (extensionBytesTotal > BUNDLE_SIZE_LIMIT) {\n    const humanBundleSize = `${(extensionBytesTotal / megabytes).toFixed(2)} MB`\n    throw new error.Abort(\n      `Your theme app extension exceeds the file size limit (${BUNDLE_SIZE_LIMIT_MB} MB). It's currently ${humanBundleSize}.`,\n      `Reduce your total file size and try again.`,\n    )\n  }\n}\n\nfunction validateLiquidBytes(liquidBytesTotal: number): void {\n  if (liquidBytesTotal > LIQUID_SIZE_LIMIT) {\n    const humanLiquidSize = `${(liquidBytesTotal / kilobytes).toFixed(2)} kB`\n    throw new error.Abort(\n      `Your theme app extension exceeds the total liquid file size limit (${LIQUID_SIZE_LIMIT_KB} kB). It's currently ${humanLiquidSize}.`,\n      `Reduce your total file size and try again.`,\n    )\n  }\n}\n\nfunction validateFile(filepath: string, dirname: string): void {\n  if (!SUPPORTED_BUCKETS.includes(dirname)) {\n    throw new error.Abort(\n      output.content`Your theme app extension includes files in an unsupported directory, ${output.token.path(\n        dirname,\n      )}`,\n      `Make sure all theme app extension files are in the supported directories: ${SUPPORTED_BUCKETS.join(', ')}`,\n    )\n  }\n  const filenameValidation = SUPPORTED_EXTS[dirname]\n  if (!filepath.match(filenameValidation.validator)) {\n    throw new error.Abort(`Invalid filename in your theme app extension: ${filepath}\n${filenameValidation.failureMessage(filepath)}`)\n  }\n}\n\nfunction arraySum(array: number[]): number {\n  return array.reduce((num1, num2) => num1 + num2, 0)\n}\n","import {validateFunctionExtensions} from './extensions/functions'\nimport {validateUIExtensions} from './extensions/ui'\nimport {validateThemeExtensions} from './extensions/theme'\nimport {App} from '../models/app/app'\n\nexport async function validateExtensions(app: App) {\n  await Promise.all([\n    validateFunctionExtensions(app.extensions.function),\n    validateUIExtensions(app.extensions.ui),\n    validateThemeExtensions(app.extensions.theme),\n  ])\n}\n","/* eslint-disable require-atomic-updates */\nimport {bundleUIAndBuildFunctionExtensions} from './deploy/bundle'\nimport {uploadThemeExtensions, uploadFunctionExtensions, uploadUIExtensionsBundle} from './deploy/upload'\n\nimport {ensureDeployEnvironment} from './environment'\nimport {fetchAppExtensionRegistrations} from './dev/fetch'\nimport {\n  App,\n  Extension,\n  getUIExtensionRendererVersion,\n  hasExtensions,\n  Identifiers,\n  UIExtension,\n  updateAppIdentifiers,\n} from '../models/app/app'\nimport {isFunctionExtensionType, isThemeExtensionType, isUiExtensionType, UIExtensionTypes} from '../constants'\nimport {loadLocalesConfig} from '../utilities/extensions/locales-configuration'\nimport {validateExtensions} from '../validators/extensions'\nimport {path, output, temporary, file, error, environment} from '@shopify/cli-kit'\nimport {OrganizationApp} from 'cli/models/organization'\nimport {AllAppExtensionRegistrationsQuerySchema} from '@shopify/cli-kit/src/api/graphql'\n\nconst RendererNotFoundBug = (extension: string) => {\n  return new error.Bug(\n    `Couldn't find renderer version for extension ${extension}`,\n    'Make sure you have all your dependencies up to date',\n  )\n}\n\ninterface DeployOptions {\n  /** The app to be built and uploaded */\n  app: App\n\n  /** If true, ignore any cached appId or extensionId */\n  reset: boolean\n}\n\nexport const deploy = async (options: DeployOptions) => {\n  if (!hasExtensions(options.app)) {\n    output.newline()\n    output.info(`No extensions to deploy to Shopify Partners yet.`)\n    return\n  }\n\n  // eslint-disable-next-line prefer-const\n  let {app, identifiers, partnersApp, partnersOrganizationId, token} = await ensureDeployEnvironment(options)\n  const apiKey = identifiers.app\n\n  output.newline()\n  output.info(`Deploying your work to Shopify Partners. It will be part of ${partnersApp.title}`)\n  output.newline()\n\n  const extensions = await Promise.all(\n    options.app.extensions.ui.map(async (extension) => {\n      return {\n        uuid: identifiers.extensions[extension.localIdentifier],\n        config: JSON.stringify(await configFor(extension, app)),\n        context: '',\n      }\n    }),\n  )\n\n  await temporary.directory(async (tmpDir) => {\n    try {\n      const bundlePath = path.join(tmpDir, `bundle.zip`)\n      await file.mkdir(path.dirname(bundlePath))\n      const bundle = app.extensions.ui.length !== 0\n      await bundleUIAndBuildFunctionExtensions({app, bundlePath, identifiers, bundle})\n\n      output.newline()\n      output.info(`Running validation…`)\n\n      await validateExtensions(app)\n\n      output.newline()\n      output.info(`Pushing your code to Shopify…`)\n      output.newline()\n\n      if (bundle) {\n        /**\n         * The bundles only support UI extensions for now so we only need bundle and upload\n         * the bundle if the app has UI extensions.\n         */\n        await uploadUIExtensionsBundle({apiKey, bundlePath, extensions, token})\n      }\n      await uploadThemeExtensions(options.app.extensions.theme, {apiKey, identifiers, token})\n      identifiers = await uploadFunctionExtensions(app.extensions.function, {identifiers, token})\n      app = await updateAppIdentifiers({app, identifiers, command: 'deploy'})\n\n      output.success('Deployed to Shopify')\n\n      const registrations = await fetchAppExtensionRegistrations({token, apiKey: identifiers.app})\n\n      outputCompletionMessage({app, partnersApp, partnersOrganizationId, identifiers, registrations})\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (error: any) {\n      /**\n       * If deployment fails when uploading we want the identifiers to be persisted\n       * for the next run.\n       */\n      await updateAppIdentifiers({app, identifiers, command: 'deploy'})\n      throw error\n    }\n  })\n}\n\nasync function outputCompletionMessage({\n  app,\n  partnersApp,\n  partnersOrganizationId,\n  identifiers,\n  registrations,\n}: {\n  app: App\n  partnersApp: Omit<OrganizationApp, 'apiSecretKeys' | 'apiKey'>\n  partnersOrganizationId: string\n  identifiers: Identifiers\n  registrations: AllAppExtensionRegistrationsQuerySchema\n}) {\n  output.newline()\n  output.info('  Summary:')\n  const outputDeployedButNotLiveMessage = (extension: Extension) => {\n    output.info(output.content`    · ${extension.localIdentifier} is deployed to Shopify but not yet live`)\n  }\n  const outputDeployedAndLivedMessage = (extension: Extension) => {\n    output.info(output.content`    · ${extension.localIdentifier} is live`)\n  }\n  app.extensions.ui.forEach(outputDeployedButNotLiveMessage)\n  app.extensions.theme.forEach(outputDeployedButNotLiveMessage)\n  app.extensions.function.forEach(outputDeployedAndLivedMessage)\n\n  output.newline()\n  const outputNextStep = async (extension: Extension) => {\n    const extensionId =\n      registrations.app.extensionRegistrations.find((registration) => {\n        return registration.uuid === identifiers.extensions[extension.localIdentifier]\n      })?.id ?? ''\n    return output.content`    · Publish ${output.token.link(\n      extension.localIdentifier,\n      await getExtensionPublishURL({extension, partnersApp, partnersOrganizationId, extensionId}),\n    )}`\n  }\n  if (app.extensions.ui.length !== 0 || app.extensions.function.length !== 0) {\n    const lines = await Promise.all([...app.extensions.ui, ...app.extensions.theme].map(outputNextStep))\n    if (lines.length > 0) {\n      output.info('  Next steps in Shopify Partners:')\n      lines.forEach(output.info)\n    }\n  }\n}\n\nasync function configFor(extension: UIExtension, app: App) {\n  const type = extension.type as UIExtensionTypes\n  switch (extension.type as UIExtensionTypes) {\n    case 'checkout_post_purchase':\n      return {metafields: extension.configuration.metafields}\n    case 'pos_ui_extension':\n    case 'product_subscription': {\n      const result = await getUIExtensionRendererVersion(type, app)\n      if (result === 'not_found') throw RendererNotFoundBug(type)\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      return {renderer_version: result?.version}\n    }\n    case 'checkout_ui_extension': {\n      return {\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        extension_points: extension.configuration.extensionPoints,\n        capabilities: extension.configuration.capabilities,\n        metafields: extension.configuration.metafields,\n        name: extension.configuration.name,\n        localization: await loadLocalesConfig(extension.directory),\n      }\n    }\n    case 'web_pixel_extension': {\n      return {\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        runtime_context: extension.configuration.runtimeContext,\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        runtime_configuration_definition: extension.configuration.configuration,\n      }\n    }\n  }\n}\n\nasync function getExtensionPublishURL({\n  extension,\n  partnersApp,\n  partnersOrganizationId,\n  extensionId,\n}: {\n  extension: Extension\n  partnersApp: Omit<OrganizationApp, 'apiSecretKeys' | 'apiKey'>\n  partnersOrganizationId: string\n  extensionId: string\n}): Promise<string> {\n  const partnersFqdn = await environment.fqdn.partners()\n  if (isUiExtensionType(extension.type)) {\n    /**\n     * The source of truth for UI extensions' slugs is the client-side\n     * Partners' React application:\n     * https://github.com/Shopify/partners/tree/master/app/assets/javascripts/sections/apps/app-extensions/extensions\n     */\n    let pathComponent: string\n    switch (extension.type as UIExtensionTypes) {\n      case 'checkout_ui_extension':\n      case 'pos_ui_extension':\n      case 'product_subscription':\n        pathComponent = extension.type\n        break\n      case 'checkout_post_purchase':\n        pathComponent = 'post_purchase'\n        break\n      case 'web_pixel_extension':\n        pathComponent = 'web_pixel'\n        break\n    }\n    return `https://${partnersFqdn}/${partnersOrganizationId}/apps/${partnersApp.id}/extensions/${pathComponent}/${extensionId}`\n  } else if (isFunctionExtensionType(extension.type)) {\n    return `https://${partnersFqdn}/${partnersOrganizationId}/apps/${partnersApp.id}/extensions`\n  } else if (isThemeExtensionType(extension.type)) {\n    return `https://${partnersFqdn}/${partnersOrganizationId}/apps/${partnersApp.id}/extensions/theme_app_extension/${extensionId}`\n  } else {\n    return ''\n  }\n}\n","import {appFlags} from '../../flags'\nimport {deploy} from '../../services/deploy'\nimport {App, load as loadApp} from '../../models/app/app'\nimport {Command, Flags} from '@oclif/core'\nimport {path, cli} from '@shopify/cli-kit'\n\nexport default class Deploy extends Command {\n  static description = 'Deploy your Shopify app'\n\n  static flags = {\n    ...cli.globalFlags,\n    ...appFlags,\n    reset: Flags.boolean({\n      hidden: false,\n      description: 'Reset all your settings.',\n      env: 'SHOPIFY_FLAG_RESET',\n      default: false,\n    }),\n  }\n\n  async run(): Promise<void> {\n    const {args, flags} = await this.parse(Deploy)\n    const directory = flags.path ? path.resolve(flags.path) : process.cwd()\n    const app: App = await loadApp(directory)\n    await deploy({app, reset: flags.reset})\n  }\n}\n"],"names":["themeExtensionConfig","generateThemeExtensionConfig","loadApp"],"mappings":"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"}