import { o as uiExtensions, t as themeExtensions, p as functionExtensions, q as configurationFileNames, a as appFlags, l as load } from '../../app-5df50971.js';
import { e as fetchOrganizations, g as selectOrganizationPrompt, d as fetchOrgAndApps, b as selectOrCreateApp } from '../../select-app-bae6a630.js';
import { output, session, store, path, os, dependency, cli } from '@shopify/cli-kit';
import { Flags, Command } from '@oclif/core';

async function info(app, { format, webEnv }) {
  if (webEnv) {
    return infoWeb(app, { format });
  } else {
    return infoApp(app, { format });
  }
}
async function infoWeb(app, { format }) {
  const token = await session.ensureAuthenticatedPartners();
  const orgs = await fetchOrganizations(token);
  const org = await selectOrganizationPrompt(orgs);
  const { organization, apps } = await fetchOrgAndApps(org.id, token);
  const selectedApp = await selectOrCreateApp(app, apps, organization, token);
  if (format === "json") {
    return output.content`${output.token.json({
      SHOPIFY_API_KEY: selectedApp.apiKey,
      SHOPIFY_API_SECRET: selectedApp.apiSecretKeys[0].secret,
      SCOPES: app.configuration.scopes
    })}`;
  } else {
    return output.content`
Use these environment variables to set up your deployment pipeline for this app:
  Â· ${output.token.green("SHOPIFY_API_KEY")}: ${selectedApp.apiKey}
  Â· ${output.token.green("SHOPIFY_API_SECRET")}: ${selectedApp.apiSecretKeys[0].secret}
  Â· ${output.token.green("SCOPES")}: ${app.configuration.scopes}
    `;
  }
}
async function infoApp(app, { format }) {
  if (format === "json") {
    return output.content`${JSON.stringify(app, null, 2)}`;
  } else {
    const appInfo = new AppInfo$1(app);
    return appInfo.output();
  }
}
const UNKNOWN_TEXT = output.content`${output.token.italic("unknown")}`.value;
const NOT_CONFIGURED_TEXT = output.content`${output.token.italic("Not yet configured")}`.value;
class AppInfo$1 {
  constructor(app) {
    this.app = app;
    this.cachedAppInfo = store.getAppInfo(app.directory);
  }
  async output() {
    const sections = [
      this.devConfigsSection(),
      this.projectSettingsSection(),
      this.appComponentsSection(),
      this.accessScopesSection(),
      await this.systemInfoSection()
    ];
    return sections.map((sectionContents) => this.section(...sectionContents)).join("\n\n");
  }
  devConfigsSection() {
    const title = "Configs for Dev";
    let appName = NOT_CONFIGURED_TEXT;
    let storeDescription = NOT_CONFIGURED_TEXT;
    let apiKey = NOT_CONFIGURED_TEXT;
    let postscript = output.content`ðŸ’¡ These will be populated when you run ${output.token.packagejsonScript(this.app.dependencyManager, "dev")}`.value;
    if (this.cachedAppInfo) {
      if (this.cachedAppInfo.title)
        appName = this.cachedAppInfo.title;
      if (this.cachedAppInfo.storeFqdn)
        storeDescription = this.cachedAppInfo.storeFqdn;
      if (this.cachedAppInfo.appId)
        apiKey = this.cachedAppInfo.appId;
      postscript = output.content`ðŸ’¡ To change these, run ${output.token.packagejsonScript(this.app.dependencyManager, "dev", "--reset")}`.value;
    }
    const lines = [
      ["App", appName],
      ["Dev store", storeDescription],
      ["API key", apiKey]
    ];
    return [title, `${this.linesToColumns(lines)}

${postscript}`];
  }
  projectSettingsSection() {
    const title = "Your Project";
    const lines = [
      ["Name", this.app.name],
      ["Root location", this.app.directory]
    ];
    return [title, this.linesToColumns(lines)];
  }
  appComponentsSection() {
    const title = "Directory Components";
    let body = `
${this.webComponentsSection()}`;
    function augmentWithExtensions(extensionTypes, extensions, outputFormatter) {
      extensionTypes.forEach((extensionType) => {
        const relevantExtensions = extensions.filter((extension) => {
          const configurationType = extension.configuration && extension.configuration.type;
          return configurationType === extensionType;
        });
        if (relevantExtensions[0]) {
          body += `

${output.content`${output.token.subheading(extensionType)}`.value}`;
          relevantExtensions.forEach((extension) => {
            body += `${outputFormatter(extension)}`;
          });
        }
      });
    }
    augmentWithExtensions(uiExtensions.types, this.app.extensions.ui, this.uiExtensionSubSection.bind(this));
    augmentWithExtensions(themeExtensions.types, this.app.extensions.theme, this.themeExtensionSubSection.bind(this));
    augmentWithExtensions(functionExtensions.types, this.app.extensions.function, this.functionExtensionSubSection.bind(this));
    const invalidExtensions = Object.values(this.app.extensions).flat().filter((extension) => !extension.configuration || !extension.configuration.type);
    if (invalidExtensions[0]) {
      body += `

${output.content`${output.token.subheading("Extensions with errors")}`.value}`;
      invalidExtensions.forEach((extension) => {
        body += `${this.invalidExtensionSubSection(extension)}`;
      });
    }
    return [title, body];
  }
  webComponentsSection() {
    const errors = [];
    const subtitle = [output.content`${output.token.subheading("web")}`.value];
    const toplevel = ["\u{1F4C2} web", ""];
    const sublevels = [];
    this.app.webs.forEach((web) => {
      if (web.configuration && web.configuration.type) {
        sublevels.push([`  \u{1F4C2} ${web.configuration.type}`, path.relative(this.app.directory, web.directory)]);
      } else if (this.app.errors) {
        const error = this.app.errors.getError(`${web.directory}/${configurationFileNames.web}`);
        if (error) {
          sublevels.push([`  \u{1F4C2} ${UNKNOWN_TEXT}`, path.relative(this.app.directory, web.directory)]);
          errors.push(error);
        }
      }
    });
    let errorContent = `
${errors.map(this.formattedError).join("\n")}`;
    if (errorContent.trim() === "")
      errorContent = "";
    return `${subtitle}
${this.linesToColumns([toplevel, ...sublevels])}${errorContent}`;
  }
  uiExtensionSubSection(extension) {
    const config = extension.configuration;
    const details = [
      [`\u{1F4C2} ${config.name}`, path.relative(this.app.directory, extension.directory)],
      ["     config file", path.relative(extension.directory, extension.configurationPath)]
    ];
    if (config && config.metafields.length) {
      details.push(["     metafields", `${config.metafields.length}`]);
    }
    return `
${this.linesToColumns(details)}`;
  }
  functionExtensionSubSection(extension) {
    const config = extension.configuration;
    const details = [
      [`\u{1F4C2} ${config.name}`, path.relative(this.app.directory, extension.directory)],
      ["     config file", path.relative(extension.directory, extension.configurationPath)]
    ];
    return `
${this.linesToColumns(details)}`;
  }
  themeExtensionSubSection(extension) {
    const config = extension.configuration;
    const details = [
      [`\u{1F4C2} ${config.name}`, path.relative(this.app.directory, extension.directory)],
      ["     config file", path.relative(extension.directory, extension.configurationPath)]
    ];
    return `
${this.linesToColumns(details)}`;
  }
  invalidExtensionSubSection(extension) {
    const details = [
      [`\u{1F4C2} ${UNKNOWN_TEXT}`, path.relative(this.app.directory, extension.directory)],
      ["     config file", path.relative(extension.directory, extension.configurationPath)]
    ];
    const error = this.formattedError(this.app.errors.getError(extension.configurationPath));
    return `
${this.linesToColumns(details)}
${error}`;
  }
  formattedError(str) {
    const [errorFirstLine, ...errorRemainingLines] = output.stringifyMessage(str).split("\n");
    const errorLines = [`! ${errorFirstLine}`, ...errorRemainingLines.map((line) => `  ${line}`)];
    return output.content`${output.token.errorText(errorLines.join("\n"))}`.value;
  }
  accessScopesSection() {
    const title = "Access Scopes in Root TOML File";
    const lines = this.app.configuration.scopes.split(",").map((scope) => [scope]);
    return [title, this.linesToColumns(lines)];
  }
  async systemInfoSection() {
    const title = "Tooling and System";
    const { platform, arch } = os.platformAndArch();
    const versionUpgradeMessage = await this.versionUpgradeMessage();
    const cliVersionInfo = [this.currentCliVersion(), versionUpgradeMessage].join(" ").trim();
    const lines = [
      ["Shopify CLI", cliVersionInfo],
      ["Package manager", this.app.dependencyManager],
      ["OS", `${platform}-${arch}`],
      ["Shell", process.env.SHELL || "unknown"],
      ["Node version", process.version]
    ];
    return [title, `${this.linesToColumns(lines)}`];
  }
  linesToColumns(lines) {
    const widths = [];
    for (let i = 0; i < lines[0].length; i++) {
      const columnRows = lines.map((line) => line[i]);
      widths.push(Math.max(...columnRows.map((row) => output.unstyled(row).length)));
    }
    const paddedLines = lines.map((line) => {
      return line.map((col, index) => {
        return `${col}${" ".repeat(widths[index] - output.unstyled(col).length)}`;
      }).join("   ").trimEnd();
    }).join("\n");
    return paddedLines;
  }
  section(title, body) {
    const formattedTitle = `${title.toUpperCase()}${" ".repeat(35 - title.length)}`;
    return output.content`${output.token.heading(formattedTitle)}\n${body}`.value;
  }
  currentCliVersion() {
    return this.app.nodeDependencies["@shopify/cli"];
  }
  async versionUpgradeMessage() {
    const cliDependency = "@shopify/cli";
    const newestVersion = await dependency.checkForNewVersion(cliDependency, this.currentCliVersion());
    if (newestVersion) {
      return output.content`${dependency.getOutputUpdateCLIReminder(this.app.dependencyManager, newestVersion)}`.value;
    }
    return "";
  }
}

const _AppInfo = class extends Command {
  async run() {
    const { flags } = await this.parse(_AppInfo);
    const directory = flags.path ? path.resolve(flags.path) : process.cwd();
    const app = await load(directory, "report");
    output.info(await info(app, { format: flags.json ? "json" : "text", webEnv: flags["web-env"] }));
    if (app.errors)
      process.exit(2);
  }
};
let AppInfo = _AppInfo;
AppInfo.description = "Print basic information about your app and extensions";
AppInfo.flags = {
  ...cli.globalFlags,
  ...appFlags,
  json: Flags.boolean({
    hidden: false,
    description: "format output as JSON",
    env: "SHOPIFY_FLAG_JSON"
  }),
  "web-env": Flags.boolean({
    hidden: false,
    description: "Outputs environment variables necessary for running and deploying web/.",
    env: "SHOPIFY_FLAG_OUTPUT_WEB_ENV",
    default: false
  })
};

export { AppInfo as default };
//# sourceMappingURL=info.js.map
