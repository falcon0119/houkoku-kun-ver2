{"version":3,"file":"build.js","sources":["../../../src/cli/services/web.ts","../../../src/cli/services/build.ts","../../../src/cli/commands/app/build.ts"],"sourcesContent":["import {Web} from '../models/app/app'\nimport {error, system} from '@shopify/cli-kit'\nimport {WebConfigurationCommands} from 'cli/models/app/app'\nimport {Writable} from 'node:stream'\n\ninterface WebOptions {\n  web: Web\n  stdout: Writable\n  stderr: Writable\n  signal: error.AbortSignal\n  env?: {[variable: string]: string}\n}\n\nexport default async function web(\n  command: WebConfigurationCommands,\n  {web, stdout, stderr, signal, env = {}}: WebOptions,\n): Promise<void> {\n  const script = web.configuration.commands[command]\n  if (!script) {\n    return\n  }\n\n  const [cmd, ...args] = script.split(' ')\n  await system.exec(cmd, args, {cwd: web.directory, stdout, stderr, signal, env})\n  stdout.write('Web successfully built.')\n}\n","import {buildThemeExtensions, buildUIExtensions, buildFunctionExtension} from './build/extension'\nimport buildWeb from './web'\nimport {installAppDependencies} from './dependencies'\nimport {App, Web} from '../models/app/app'\nimport {error, output} from '@shopify/cli-kit'\nimport {Writable} from 'node:stream'\n\ninterface BuildOptions {\n  app: App\n  skipDependenciesInstallation: boolean\n  apiKey?: string\n}\n\nasync function build({app, skipDependenciesInstallation, apiKey = undefined}: BuildOptions) {\n  if (!skipDependenciesInstallation) {\n    await installAppDependencies(app)\n  }\n\n  const env: {SHOPIFY_API_KEY?: string} = {}\n  if (apiKey) {\n    env.SHOPIFY_API_KEY = apiKey\n  }\n\n  await output.concurrent([\n    ...app.webs.map((web: Web) => {\n      return {\n        prefix: web.configuration.type,\n        action: async (stdout: Writable, stderr: Writable, signal: error.AbortSignal) => {\n          await buildWeb('build', {web, stdout, stderr, signal, env})\n        },\n      }\n    }),\n    {\n      prefix: 'theme_extensions',\n      action: async (stdout: Writable, stderr: Writable, signal: error.AbortSignal) => {\n        await buildThemeExtensions({\n          app,\n          extensions: app.extensions.theme,\n          stdout,\n          stderr,\n          signal,\n        })\n      },\n    },\n    {\n      prefix: 'extensions',\n      action: async (stdout: Writable, stderr: Writable, signal: error.AbortSignal) => {\n        await buildUIExtensions({\n          app,\n          extensions: app.extensions.ui,\n          stdout,\n          stderr,\n          signal,\n        })\n      },\n    },\n    ...app.extensions.function.map((functionExtension) => {\n      return {\n        prefix: functionExtension.localIdentifier,\n        action: async (stdout: Writable, stderr: Writable, signal: error.AbortSignal) => {\n          await buildFunctionExtension(functionExtension, {stdout, stderr, signal, app})\n        },\n      }\n    }),\n  ])\n\n  output.newline()\n  output.success(`${app.name} built`)\n}\n\nexport default build\n","import {appFlags} from '../../flags'\nimport {App, load as loadApp} from '../../models/app/app'\nimport build from '../../services/build'\nimport {Command, Flags} from '@oclif/core'\nimport {path, cli} from '@shopify/cli-kit'\n\nexport default class Build extends Command {\n  static description = 'Build the app'\n\n  static flags = {\n    ...cli.globalFlags,\n    ...appFlags,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    'skip-dependencies-installation': Flags.boolean({\n      hidden: false,\n      description: 'Skips the installation of dependencies.',\n      env: 'SHOPIFY_FLAG_SKIP_DEPENDENCIES_INSTALLATION',\n      default: false,\n    }),\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    'api-key': Flags.string({\n      hidden: false,\n      description: \"Application's API key that will be exposed at build time.\",\n      env: 'SHOPIFY_FLAG_API_KEY',\n    }),\n  }\n\n  async run(): Promise<void> {\n    const {flags} = await this.parse(Build)\n    const directory = flags.path ? path.resolve(flags.path) : process.cwd()\n    const app: App = await loadApp(directory)\n    await build({app, skipDependenciesInstallation: flags['skip-dependencies-installation'], apiKey: flags['api-key']})\n  }\n}\n"],"names":["web","buildWeb","loadApp"],"mappings":"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"}