{"version":3,"file":"info.js","sources":["../../../src/cli/services/info.ts","../../../src/cli/commands/app/info.ts"],"sourcesContent":["import {fetchOrgAndApps, fetchOrganizations} from './dev/fetch'\nimport {selectOrCreateApp} from './dev/select-app'\nimport {App, FunctionExtension, ThemeExtension, UIExtension} from '../models/app/app'\nimport {configurationFileNames, functionExtensions, themeExtensions, uiExtensions} from '../constants'\nimport {selectOrganizationPrompt} from '../prompts/dev'\nimport {os, output, path, session, store, dependency} from '@shopify/cli-kit'\n\nexport type Format = 'json' | 'text'\ninterface InfoOptions {\n  format: Format\n  /** When true the command outputs the env. variables necessary to deploy and run web/ */\n  webEnv: boolean\n}\ninterface Configurable {\n  configuration?: {type?: string}\n}\n\nexport async function info(app: App, {format, webEnv}: InfoOptions): Promise<output.Message> {\n  if (webEnv) {\n    return infoWeb(app, {format})\n  } else {\n    return infoApp(app, {format})\n  }\n}\n\nexport async function infoWeb(app: App, {format}: Omit<InfoOptions, 'webEnv'>): Promise<output.Message> {\n  const token = await session.ensureAuthenticatedPartners()\n\n  const orgs = await fetchOrganizations(token)\n  const org = await selectOrganizationPrompt(orgs)\n  const {organization, apps} = await fetchOrgAndApps(org.id, token)\n\n  const selectedApp = await selectOrCreateApp(app, apps, organization, token)\n\n  if (format === 'json') {\n    return output.content`${output.token.json({\n      SHOPIFY_API_KEY: selectedApp.apiKey,\n      SHOPIFY_API_SECRET: selectedApp.apiSecretKeys[0].secret,\n      SCOPES: app.configuration.scopes,\n    })}`\n  } else {\n    return output.content`\nUse these environment variables to set up your deployment pipeline for this app:\n  Â· ${output.token.green('SHOPIFY_API_KEY')}: ${selectedApp.apiKey}\n  Â· ${output.token.green('SHOPIFY_API_SECRET')}: ${selectedApp.apiSecretKeys[0].secret}\n  Â· ${output.token.green('SCOPES')}: ${app.configuration.scopes}\n    `\n  }\n}\n\nexport async function infoApp(app: App, {format}: Omit<InfoOptions, 'webEnv'>): Promise<output.Message> {\n  if (format === 'json') {\n    return output.content`${JSON.stringify(app, null, 2)}`\n  } else {\n    const appInfo = new AppInfo(app)\n    return appInfo.output()\n  }\n}\n\nconst UNKNOWN_TEXT = output.content`${output.token.italic('unknown')}`.value\nconst NOT_CONFIGURED_TEXT = output.content`${output.token.italic('Not yet configured')}`.value\n\nclass AppInfo {\n  private app: App\n  private cachedAppInfo: store.CachedAppInfo | undefined\n\n  constructor(app: App) {\n    this.app = app\n    this.cachedAppInfo = store.getAppInfo(app.directory)\n  }\n\n  async output(): Promise<string> {\n    const sections: [string, string][] = [\n      this.devConfigsSection(),\n      this.projectSettingsSection(),\n      this.appComponentsSection(),\n      this.accessScopesSection(),\n      await this.systemInfoSection(),\n    ]\n    return sections.map((sectionContents: [string, string]) => this.section(...sectionContents)).join('\\n\\n')\n  }\n\n  devConfigsSection(): [string, string] {\n    const title = 'Configs for Dev'\n\n    let appName = NOT_CONFIGURED_TEXT\n    let storeDescription = NOT_CONFIGURED_TEXT\n    let apiKey = NOT_CONFIGURED_TEXT\n    let postscript = output.content`ðŸ’¡ These will be populated when you run ${output.token.packagejsonScript(\n      this.app.dependencyManager,\n      'dev',\n    )}`.value\n    if (this.cachedAppInfo) {\n      if (this.cachedAppInfo.title) appName = this.cachedAppInfo.title\n      if (this.cachedAppInfo.storeFqdn) storeDescription = this.cachedAppInfo.storeFqdn\n      if (this.cachedAppInfo.appId) apiKey = this.cachedAppInfo.appId\n      postscript = output.content`ðŸ’¡ To change these, run ${output.token.packagejsonScript(\n        this.app.dependencyManager,\n        'dev',\n        '--reset',\n      )}`.value\n    }\n    const lines = [\n      ['App', appName],\n      ['Dev store', storeDescription],\n      ['API key', apiKey],\n    ]\n    return [title, `${this.linesToColumns(lines)}\\n\\n${postscript}`]\n  }\n\n  projectSettingsSection(): [string, string] {\n    const title = 'Your Project'\n    const lines = [\n      ['Name', this.app.name],\n      ['Root location', this.app.directory],\n    ]\n    return [title, this.linesToColumns(lines)]\n  }\n\n  appComponentsSection(): [string, string] {\n    const title = 'Directory Components'\n\n    let body = `\\n${this.webComponentsSection()}`\n\n    function augmentWithExtensions<TExtension extends Configurable>(\n      extensionTypes: ReadonlyArray<string>,\n      extensions: TExtension[],\n      outputFormatter: (extension: TExtension) => string,\n    ) {\n      extensionTypes.forEach((extensionType: string) => {\n        const relevantExtensions = extensions.filter((extension: TExtension) => {\n          const configurationType = extension.configuration && extension.configuration.type\n          return configurationType === extensionType\n        })\n        if (relevantExtensions[0]) {\n          body += `\\n\\n${output.content`${output.token.subheading(extensionType)}`.value}`\n          relevantExtensions.forEach((extension: TExtension) => {\n            body += `${outputFormatter(extension)}`\n          })\n        }\n      })\n    }\n    augmentWithExtensions(uiExtensions.types, this.app.extensions.ui, this.uiExtensionSubSection.bind(this))\n    augmentWithExtensions(themeExtensions.types, this.app.extensions.theme, this.themeExtensionSubSection.bind(this))\n    augmentWithExtensions(\n      functionExtensions.types,\n      this.app.extensions.function,\n      this.functionExtensionSubSection.bind(this),\n    )\n\n    const invalidExtensions = Object.values(this.app.extensions)\n      .flat()\n      .filter((extension) => !extension.configuration || !extension.configuration.type)\n    if (invalidExtensions[0]) {\n      body += `\\n\\n${output.content`${output.token.subheading('Extensions with errors')}`.value}`\n      invalidExtensions.forEach((extension) => {\n        body += `${this.invalidExtensionSubSection(extension)}`\n      })\n    }\n\n    return [title, body]\n  }\n\n  webComponentsSection(): string {\n    const errors: output.Message[] = []\n    const subtitle = [output.content`${output.token.subheading('web')}`.value]\n    const toplevel = ['ðŸ“‚ web', '']\n    const sublevels: [string, string][] = []\n    this.app.webs.forEach((web) => {\n      if (web.configuration && web.configuration.type) {\n        sublevels.push([`  ðŸ“‚ ${web.configuration.type}`, path.relative(this.app.directory, web.directory)])\n      } else if (this.app.errors) {\n        const error = this.app.errors.getError(`${web.directory}/${configurationFileNames.web}`)\n        if (error) {\n          sublevels.push([`  ðŸ“‚ ${UNKNOWN_TEXT}`, path.relative(this.app.directory, web.directory)])\n          errors.push(error)\n        }\n      }\n    })\n    let errorContent = `\\n${errors.map(this.formattedError).join('\\n')}`\n    if (errorContent.trim() === '') errorContent = ''\n\n    return `${subtitle}\\n${this.linesToColumns([toplevel, ...sublevels])}${errorContent}`\n  }\n\n  uiExtensionSubSection(extension: UIExtension): string {\n    const config = extension.configuration\n    const details = [\n      [`ðŸ“‚ ${config.name}`, path.relative(this.app.directory, extension.directory)],\n      ['     config file', path.relative(extension.directory, extension.configurationPath)],\n    ]\n    if (config && config.metafields.length) {\n      details.push(['     metafields', `${config.metafields.length}`])\n    }\n\n    return `\\n${this.linesToColumns(details)}`\n  }\n\n  functionExtensionSubSection(extension: FunctionExtension): string {\n    const config = extension.configuration\n    const details = [\n      [`ðŸ“‚ ${config.name}`, path.relative(this.app.directory, extension.directory)],\n      ['     config file', path.relative(extension.directory, extension.configurationPath)],\n    ]\n\n    return `\\n${this.linesToColumns(details)}`\n  }\n\n  themeExtensionSubSection(extension: ThemeExtension): string {\n    const config = extension.configuration\n    const details = [\n      [`ðŸ“‚ ${config.name}`, path.relative(this.app.directory, extension.directory)],\n      ['     config file', path.relative(extension.directory, extension.configurationPath)],\n    ]\n\n    return `\\n${this.linesToColumns(details)}`\n  }\n\n  invalidExtensionSubSection(extension: UIExtension | FunctionExtension | ThemeExtension) {\n    const details = [\n      [`ðŸ“‚ ${UNKNOWN_TEXT}`, path.relative(this.app.directory, extension.directory)],\n      ['     config file', path.relative(extension.directory, extension.configurationPath)],\n    ]\n    const error = this.formattedError(this.app.errors!.getError(extension.configurationPath))\n    return `\\n${this.linesToColumns(details)}\\n${error}`\n  }\n\n  formattedError(str: output.Message): string {\n    const [errorFirstLine, ...errorRemainingLines] = output.stringifyMessage(str).split('\\n')\n    const errorLines = [`! ${errorFirstLine}`, ...errorRemainingLines.map((line) => `  ${line}`)]\n    return output.content`${output.token.errorText(errorLines.join('\\n'))}`.value\n  }\n\n  accessScopesSection(): [string, string] {\n    const title = 'Access Scopes in Root TOML File'\n    const lines = this.app.configuration.scopes.split(',').map((scope) => [scope])\n    return [title, this.linesToColumns(lines)]\n  }\n\n  async systemInfoSection(): Promise<[string, string]> {\n    const title = 'Tooling and System'\n    const {platform, arch} = os.platformAndArch()\n    const versionUpgradeMessage = await this.versionUpgradeMessage()\n    const cliVersionInfo = [this.currentCliVersion(), versionUpgradeMessage].join(' ').trim()\n    const lines: string[][] = [\n      ['Shopify CLI', cliVersionInfo],\n      ['Package manager', this.app.dependencyManager],\n      ['OS', `${platform}-${arch}`],\n      ['Shell', process.env.SHELL || 'unknown'],\n      ['Node version', process.version],\n    ]\n    return [title, `${this.linesToColumns(lines)}`]\n  }\n\n  linesToColumns(lines: string[][]): string {\n    const widths: number[] = []\n    for (let i = 0; i < lines[0].length; i++) {\n      const columnRows = lines.map((line) => line[i])\n      widths.push(Math.max(...columnRows.map((row) => output.unstyled(row).length)))\n    }\n    const paddedLines = lines\n      .map((line) => {\n        return line\n          .map((col, index) => {\n            return `${col}${' '.repeat(widths[index] - output.unstyled(col).length)}`\n          })\n          .join('   ')\n          .trimEnd()\n      })\n      .join('\\n')\n    return paddedLines\n  }\n\n  section(title: string, body: string): string {\n    const formattedTitle = `${title.toUpperCase()}${' '.repeat(35 - title.length)}`\n    return output.content`${output.token.heading(formattedTitle)}\\n${body}`.value\n  }\n\n  currentCliVersion(): string {\n    return this.app.nodeDependencies['@shopify/cli']\n  }\n\n  async versionUpgradeMessage(): Promise<string> {\n    const cliDependency = '@shopify/cli'\n    const newestVersion = await dependency.checkForNewVersion(cliDependency, this.currentCliVersion())\n    if (newestVersion) {\n      return output.content`${dependency.getOutputUpdateCLIReminder(this.app.dependencyManager, newestVersion)}`.value\n    }\n    return ''\n  }\n}\n","import {appFlags} from '../../flags'\nimport {load as loadApp, App} from '../../models/app/app'\nimport {Format, info} from '../../services/info'\nimport {Command, Flags} from '@oclif/core'\nimport {output, path, cli} from '@shopify/cli-kit'\n\nexport default class AppInfo extends Command {\n  static description = 'Print basic information about your app and extensions'\n\n  static flags = {\n    ...cli.globalFlags,\n    ...appFlags,\n    json: Flags.boolean({\n      hidden: false,\n      description: 'format output as JSON',\n      env: 'SHOPIFY_FLAG_JSON',\n    }),\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    'web-env': Flags.boolean({\n      hidden: false,\n      description: 'Outputs environment variables necessary for running and deploying web/.',\n      env: 'SHOPIFY_FLAG_OUTPUT_WEB_ENV',\n      default: false,\n    }),\n  }\n\n  public async run(): Promise<void> {\n    const {flags} = await this.parse(AppInfo)\n    const directory = flags.path ? path.resolve(flags.path) : process.cwd()\n    const app: App = await loadApp(directory, 'report')\n    output.info(await info(app, {format: (flags.json ? 'json' : 'text') as Format, webEnv: flags['web-env']}))\n    if (app.errors) process.exit(2)\n  }\n}\n"],"names":["AppInfo","loadApp"],"mappings":"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"}