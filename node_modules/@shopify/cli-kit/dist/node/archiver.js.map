{"version":3,"file":"archiver.js","sources":["../../src/node/archiver.ts"],"sourcesContent":["import {debug, content, token} from '../output'\nimport {zip as crossZip} from 'cross-zip'\n\n/**\n * It zips a directory.\n * @param inputDirectory {string} The absolute path to the directory to be zipped.\n * @param outputZipPath {string} The absolute path to the output zip file.\n */\nexport async function zip(inputDirectory: string, outputZipPath: string): Promise<void> {\n  debug(content`Zipping ${token.path(inputDirectory)} into ${token.path(outputZipPath)}`)\n  const cwd = process.cwd()\n  process.chdir(inputDirectory)\n\n  await new Promise<void>((resolve, reject) => {\n    crossZip('./', outputZipPath, (error) => {\n      process.chdir(cwd)\n      if (error) {\n        reject(error)\n      } else {\n        resolve()\n      }\n    })\n  })\n}\n"],"names":["crossZip"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,eAAA,GAAA,CAA0B,gBAAwB,aAAsC,EAAA;AACtF,EAAM,KAAA,CAAA,OAAA,CAAA,QAAA,EAAkB,MAAM,IAAK,CAAA,cAAc,UAAU,KAAM,CAAA,IAAA,CAAK,aAAa,CAAG,CAAA,CAAA,CAAA,CAAA;AACtF,EAAM,MAAA,GAAA,GAAM,QAAQ,GAAI,EAAA,CAAA;AACxB,EAAA,OAAA,CAAQ,MAAM,cAAc,CAAA,CAAA;AAE5B,EAAA,MAAM,IAAI,OAAA,CAAc,CAAC,OAAA,EAAS,MAAW,KAAA;AAC3C,IAASA,KAAA,CAAA,IAAA,EAAM,aAAe,EAAA,CAAC,KAAU,KAAA;AACvC,MAAA,OAAA,CAAQ,MAAM,GAAG,CAAA,CAAA;AACjB,MAAA,IAAI,KAAO,EAAA;AACT,QAAA,MAAA,CAAO,KAAK,CAAA,CAAA;AAAA,OACP,MAAA;AACL,QAAQ,OAAA,EAAA,CAAA;AAAA,OACV;AAAA,KACD,CAAA,CAAA;AAAA,GACF,CAAA,CAAA;AACH;;;;"}